import { Streamer } from './Streamer';
import { Comma, ForEachCallback, LineBreak, PristineInput, Quote, ReadAllCallback, ReadCallback } from './types';
declare const EOL: LineBreak;
declare const SEPARATOR: Comma;
declare const detect: (input: string) => Comma;
declare const stringify: (input?: PristineInput, sep?: Comma) => string;
declare const parse: (input: string, sep?: "," | ";" | "|" | "\t" | undefined, quo?: string | undefined) => string[][];
declare function read(input: string, callback: ReadCallback): number;
declare function read(input: string, sep: Comma, callback: ReadCallback): number;
declare function read(input: string, sep: Comma, quo: Quote, callback: ReadCallback): number;
declare function forEach(input: string, callback: ForEachCallback): void;
declare function forEach(input: string, sep: Comma, callback: ForEachCallback): void;
declare function forEach(input: string, sep: Comma, quo: Quote, callback: ForEachCallback): void;
declare function readAll(input: string, callback: ReadAllCallback): number;
declare function readAll(input: string, sep: Comma, callback: ReadAllCallback): number;
declare function readAll(input: string, sep: Comma, quo: Quote, callback: ReadAllCallback): number;
declare function readChunk(input: string, callback: ReadAllCallback): number;
declare function readChunk(input: string, sep: Comma, callback: ReadAllCallback): number;
declare function readChunk(input: string, sep: Comma, quo: Quote, callback: ReadAllCallback): number;
declare const fetch: (input: string, sep?: "," | ";" | "|" | "\t" | undefined, quo?: string | undefined) => string[];
declare const createStream: (options?: {
    separator?: "," | ";" | "|" | "\t" | undefined;
    quote?: string | undefined;
} | undefined) => Streamer;
export { EOL as eol, SEPARATOR as separator, detect, stringify, parse, read, forEach, readAll, readChunk, fetch, createStream, };
