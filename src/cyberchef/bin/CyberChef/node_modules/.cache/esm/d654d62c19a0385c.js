let Operation,Utils,HASH_DELIM_OPTIONS,ctphjs,OperationError;_19a‍.x([["default",()=>_19a‍.o]]);_19a‍.w("../Operation.mjs",[["default",["Operation"],function(v){Operation=v}]]);_19a‍.w("../Utils.mjs",[["default",["Utils"],function(v){Utils=v}]]);_19a‍.w("../lib/Delim.mjs",[["HASH_DELIM_OPTIONS",["HASH_DELIM_OPTIONS"],function(v){HASH_DELIM_OPTIONS=v}]]);_19a‍.w("ctph.js",[["default",["ctphjs"],function(v){ctphjs=v}]]);_19a‍.w("../errors/OperationError.mjs",[["default",["OperationError"],function(v){OperationError=v}]]);/**
 * @author n1474335 [n1474335@gmail.com]
 * @copyright Crown Copyright 2016
 * @license Apache-2.0
 */







/**
 * Compare CTPH hashes operation
 */
class CompareCTPHHashes extends Operation {

    /**
     * CompareCTPHHashes constructor
     */
    constructor() {
        super();

        this.name = "Compare CTPH hashes";
        this.module = "Crypto";
        this.description = "Compares two Context Triggered Piecewise Hashing (CTPH) fuzzy hashes to determine the similarity between them on a scale of 0 to 100.";
        this.infoURL = "https://forensicswiki.xyz/wiki/index.php?title=Context_Triggered_Piecewise_Hashing";
        this.inputType = "string";
        this.outputType = "Number";
        this.args = [
            {
                "name": "Delimiter",
                "type": "option",
                "value": HASH_DELIM_OPTIONS
            }
        ];
    }

    /**
     * @param {string} input
     * @param {Object[]} args
     * @returns {Number}
     */
    run(input, args) {
        const samples = input.split(Utils.charRep(args[0]));
        if (samples.length !== 2) throw new OperationError("Incorrect number of samples.");
        return ctphjs.similarity(samples[0], samples[1]);
    }

}

_19a‍.d(CompareCTPHHashes);
