let jpath,Operation,OperationError;_1a4‍.x([["default",()=>_1a4‍.o]]);_1a4‍.w("jsonpath",[["default",["jpath"],function(v){jpath=v}]]);_1a4‍.w("../Operation.mjs",[["default",["Operation"],function(v){Operation=v}]]);_1a4‍.w("../errors/OperationError.mjs",[["default",["OperationError"],function(v){OperationError=v}]]);/**
 * @author Matt C (matt@artemisbot.uk)
 * @copyright Crown Copyright 2016
 * @license Apache-2.0
 */





/**
 * JPath expression operation
 */
class JPathExpression extends Operation {

    /**
     * JPathExpression constructor
     */
    constructor() {
        super();

        this.name = "JPath expression";
        this.module = "Code";
        this.description = "Extract information from a JSON object with a JPath query.";
        this.infoURL = "http://goessner.net/articles/JsonPath/";
        this.inputType = "string";
        this.outputType = "string";
        this.args = [
            {
                "name": "Query",
                "type": "string",
                "value": ""
            },
            {
                "name": "Result delimiter",
                "type": "binaryShortString",
                "value": "\\n"
            }
        ];
    }

    /**
     * @param {string} input
     * @param {Object[]} args
     * @returns {string}
     */
    run(input, args) {
        const [query, delimiter] = args;
        let results,
            obj;

        try {
            obj = JSON.parse(input);
        } catch (err) {
            throw new OperationError(`Invalid input JSON: ${err.message}`);
        }

        try {
            results = jpath.query(obj, query);
        } catch (err) {
            throw new OperationError(`Invalid JPath expression: ${err.message}`);
        }

        return results.map(result => JSON.stringify(result)).join(delimiter);
    }

}

_1a4‍.d(JPathExpression);
