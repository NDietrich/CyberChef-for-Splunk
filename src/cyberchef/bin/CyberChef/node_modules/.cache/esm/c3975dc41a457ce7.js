let Operation,kbpgp,ASP,importPrivateKey,OperationError,es6promisify;_1a4‍.x([["default",()=>_1a4‍.o]]);_1a4‍.w("../Operation.mjs",[["default",["Operation"],function(v){Operation=v}]]);_1a4‍.w("kbpgp",[["default",["kbpgp"],function(v){kbpgp=v}]]);_1a4‍.w("../lib/PGP.mjs",[["ASP",["ASP"],function(v){ASP=v}],["importPrivateKey",["importPrivateKey"],function(v){importPrivateKey=v}]]);_1a4‍.w("../errors/OperationError.mjs",[["default",["OperationError"],function(v){OperationError=v}]]);_1a4‍.w("es6-promisify",[["*",null,function(v){es6promisify=v}]]);/**
 * @author tlwr [toby@toby.codes]
 * @copyright Crown Copyright 2017
 * @license Apache-2.0
 */






const promisify = es6promisify.default ? es6promisify.default.promisify : es6promisify.promisify;

/**
 * PGP Decrypt operation
 */
class PGPDecrypt extends Operation {

    /**
     * PGPDecrypt constructor
     */
    constructor() {
        super();

        this.name = "PGP Decrypt";
        this.module = "PGP";
        this.description = [
            "Input: the ASCII-armoured PGP message you want to decrypt.",
            "<br><br>",
            "Arguments: the ASCII-armoured PGP private key of the recipient, ",
            "(and the private key password if necessary).",
            "<br><br>",
            "Pretty Good Privacy is an encryption standard (OpenPGP) used for encrypting, decrypting, and signing messages.",
            "<br><br>",
            "This function uses the Keybase implementation of PGP.",
        ].join("\n");
        this.infoURL = "https://wikipedia.org/wiki/Pretty_Good_Privacy";
        this.inputType = "string";
        this.outputType = "string";
        this.args = [
            {
                "name": "Private key of recipient",
                "type": "text",
                "value": ""
            },
            {
                "name": "Private key passphrase",
                "type": "string",
                "value": ""
            }
        ];
    }

    /**
     * @param {string} input
     * @param {Object[]} args
     * @returns {string}
     *
     * @throws {OperationError} if invalid private key
     */
    async run(input, args) {
        const encryptedMessage = input,
            [privateKey, passphrase] = args,
            keyring = new kbpgp.keyring.KeyRing();
        let plaintextMessage;

        if (!privateKey) throw new OperationError("Enter the private key of the recipient.");

        const key = await importPrivateKey(privateKey, passphrase);
        keyring.add_key_manager(key);

        try {
            plaintextMessage = await promisify(kbpgp.unbox)({
                armored: encryptedMessage,
                keyfetch: keyring,
                asp: ASP
            });
        } catch (err) {
            throw new OperationError(`Couldn't decrypt message with provided private key: ${err}`);
        }

        return plaintextMessage.toString();
    }

}

_1a4‍.d(PGPDecrypt);
