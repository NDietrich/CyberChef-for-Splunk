let Operation,OperationError,BSON;_632‍.x([["default",()=>_632‍.o]]);_632‍.w("../Operation.mjs",[["default",["Operation"],function(v){Operation=v}]]);_632‍.w("../errors/OperationError.mjs",[["default",["OperationError"],function(v){OperationError=v}]]);_632‍.w("bson",[["default",["BSON"],function(v){BSON=v}]]);/**
 * @author dmfj [dominic@dmfj.io]
 * @copyright Crown Copyright 2020
 * @license Apache-2.0
 */





/**
 * Parse ObjectID timestamp operation
 */
class ParseObjectIDTimestamp extends Operation {

    /**
     * ParseObjectIDTimestamp constructor
     */
    constructor() {
        super();

        this.name = "Parse ObjectID timestamp";
        this.module = "Serialise";
        this.description = "Parse timestamp from MongoDB/BSON ObjectID hex string.";
        this.infoURL = "https://docs.mongodb.com/manual/reference/method/ObjectId.getTimestamp/";
        this.inputType = "string";
        this.outputType = "string";
        this.args = [];
    }

    /**
     * @param {string} input
     * @param {Object[]} args
     * @returns {string}
     */
    run(input, args) {
        try {
            const objectId = new BSON.ObjectID(input);
            return objectId.getTimestamp().toISOString();
        } catch (err) {
            throw new OperationError(err);
        }
    }

}

_632‍.d(ParseObjectIDTimestamp);
