let Operation,jwt,OperationError;_442‍.x([["default",()=>_442‍.o]]);_442‍.w("../Operation.mjs",[["default",["Operation"],function(v){Operation=v}]]);_442‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_442‍.w("../errors/OperationError.mjs",[["default",["OperationError"],function(v){OperationError=v}]]);/**
 * @author gchq77703 []
 * @copyright Crown Copyright 2018
 * @license Apache-2.0
 */





/**
 * JWT Decode operation
 */
class JWTDecode extends Operation {

    /**
     * JWTDecode constructor
     */
    constructor() {
        super();

        this.name = "JWT Decode";
        this.module = "Crypto";
        this.description = "Decodes a JSON Web Token <b>without</b> checking whether the provided secret / private key is valid. Use 'JWT Verify' to check if the signature is valid as well.";
        this.infoURL = "https://wikipedia.org/wiki/JSON_Web_Token";
        this.inputType = "string";
        this.outputType = "JSON";
        this.args = [];
    }

    /**
     * @param {string} input
     * @param {Object[]} args
     * @returns {JSON}
     */
    run(input, args) {
        try {
            const decoded = jwt.decode(input, {
                json: true,
                complete: true
            });

            return decoded.payload;
        } catch (err) {
            throw new OperationError(err);
        }
    }

}

_442‍.d(JWTDecode);
