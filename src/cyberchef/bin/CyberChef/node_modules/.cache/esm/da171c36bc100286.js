let Operation,OperationError,isImage,toBase64,isWorkerEnvironment,jimplib;_bc1‍.x([["default",()=>_bc1‍.o]]);_bc1‍.w("../Operation.mjs",[["default",["Operation"],function(v){Operation=v}]]);_bc1‍.w("../errors/OperationError.mjs",[["default",["OperationError"],function(v){OperationError=v}]]);_bc1‍.w("../lib/FileType.mjs",[["isImage",["isImage"],function(v){isImage=v}]]);_bc1‍.w("../lib/Base64.mjs",[["toBase64",["toBase64"],function(v){toBase64=v}]]);_bc1‍.w("../Utils.mjs",[["isWorkerEnvironment",["isWorkerEnvironment"],function(v){isWorkerEnvironment=v}]]);_bc1‍.w("jimp/es/index.js",[["default",["jimplib"],function(v){jimplib=v}]]);/**
 * @author j433866 [j433866@gmail.com]
 * @copyright Crown Copyright 2019
 * @license Apache-2.0
 */







const jimp = jimplib.default ? jimplib.default : jimplib;

/**
 * Flip Image operation
 */
class FlipImage extends Operation {

    /**
     * FlipImage constructor
     */
    constructor() {
        super();

        this.name = "Flip Image";
        this.module = "Image";
        this.description = "Flips an image along its X or Y axis.";
        this.infoURL = "";
        this.inputType = "ArrayBuffer";
        this.outputType = "ArrayBuffer";
        this.presentType = "html";
        this.args = [
            {
                name: "Axis",
                type: "option",
                value: ["Horizontal", "Vertical"]
            }
        ];
    }

    /**
     * @param {ArrayBuffer} input
     * @param {Object[]} args
     * @returns {byteArray}
     */
    async run(input, args) {
        const [flipAxis] = args;
        if (!isImage(input)) {
            throw new OperationError("Invalid input file type.");
        }

        let image;
        try {
            image = await jimp.read(input);
        } catch (err) {
            throw new OperationError(`Error loading image. (${err})`);
        }
        try {
            if (isWorkerEnvironment())
                self.sendStatusMessage("Flipping image...");
            switch (flipAxis) {
                case "Horizontal":
                    image.flip(true, false);
                    break;
                case "Vertical":
                    image.flip(false, true);
                    break;
            }

            let imageBuffer;
            if (image.getMIME() === "image/gif") {
                imageBuffer = await image.getBufferAsync(jimp.MIME_PNG);
            } else {
                imageBuffer = await image.getBufferAsync(jimp.AUTO);
            }
            return imageBuffer.buffer;
        } catch (err) {
            throw new OperationError(`Error flipping image. (${err})`);
        }
    }

    /**
     * Displays the flipped image using HTML for web apps
     * @param {ArrayBuffer} data
     * @returns {html}
     */
    present(data) {
        if (!data.byteLength) return "";
        const dataArray = new Uint8Array(data);

        const type = isImage(dataArray);
        if (!type) {
            throw new OperationError("Invalid file type.");
        }

        return `<img src="data:${type};base64,${toBase64(dataArray)}">`;
    }

}

_bc1‍.d(FlipImage);
