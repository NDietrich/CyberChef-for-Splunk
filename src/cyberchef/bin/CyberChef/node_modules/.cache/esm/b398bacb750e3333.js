let Operation,Utils,MD2,MD4,MD5,MD6,SHA0,SHA1,SHA2,SHA3,Keccak,Shake,RIPEMD,HAS160,Whirlpool,SSDEEP,CTPH,Fletcher8Checksum,Fletcher16Checksum,Fletcher32Checksum,Fletcher64Checksum,Adler32Checksum,CRC8Checksum,CRC16Checksum,CRC32Checksum,BLAKE2b,BLAKE2s,Streebog,GOSTHash;_750‍.x([["default",()=>_750‍.o]]);_750‍.w("../Operation.mjs",[["default",["Operation"],function(v){Operation=v}]]);_750‍.w("../Utils.mjs",[["default",["Utils"],function(v){Utils=v}]]);_750‍.w("./MD2.mjs",[["default",["MD2"],function(v){MD2=v}]]);_750‍.w("./MD4.mjs",[["default",["MD4"],function(v){MD4=v}]]);_750‍.w("./MD5.mjs",[["default",["MD5"],function(v){MD5=v}]]);_750‍.w("./MD6.mjs",[["default",["MD6"],function(v){MD6=v}]]);_750‍.w("./SHA0.mjs",[["default",["SHA0"],function(v){SHA0=v}]]);_750‍.w("./SHA1.mjs",[["default",["SHA1"],function(v){SHA1=v}]]);_750‍.w("./SHA2.mjs",[["default",["SHA2"],function(v){SHA2=v}]]);_750‍.w("./SHA3.mjs",[["default",["SHA3"],function(v){SHA3=v}]]);_750‍.w("./Keccak.mjs",[["default",["Keccak"],function(v){Keccak=v}]]);_750‍.w("./Shake.mjs",[["default",["Shake"],function(v){Shake=v}]]);_750‍.w("./RIPEMD.mjs",[["default",["RIPEMD"],function(v){RIPEMD=v}]]);_750‍.w("./HAS160.mjs",[["default",["HAS160"],function(v){HAS160=v}]]);_750‍.w("./Whirlpool.mjs",[["default",["Whirlpool"],function(v){Whirlpool=v}]]);_750‍.w("./SSDEEP.mjs",[["default",["SSDEEP"],function(v){SSDEEP=v}]]);_750‍.w("./CTPH.mjs",[["default",["CTPH"],function(v){CTPH=v}]]);_750‍.w("./Fletcher8Checksum.mjs",[["default",["Fletcher8Checksum"],function(v){Fletcher8Checksum=v}]]);_750‍.w("./Fletcher16Checksum.mjs",[["default",["Fletcher16Checksum"],function(v){Fletcher16Checksum=v}]]);_750‍.w("./Fletcher32Checksum.mjs",[["default",["Fletcher32Checksum"],function(v){Fletcher32Checksum=v}]]);_750‍.w("./Fletcher64Checksum.mjs",[["default",["Fletcher64Checksum"],function(v){Fletcher64Checksum=v}]]);_750‍.w("./Adler32Checksum.mjs",[["default",["Adler32Checksum"],function(v){Adler32Checksum=v}]]);_750‍.w("./CRC8Checksum.mjs",[["default",["CRC8Checksum"],function(v){CRC8Checksum=v}]]);_750‍.w("./CRC16Checksum.mjs",[["default",["CRC16Checksum"],function(v){CRC16Checksum=v}]]);_750‍.w("./CRC32Checksum.mjs",[["default",["CRC32Checksum"],function(v){CRC32Checksum=v}]]);_750‍.w("./BLAKE2b.mjs",[["default",["BLAKE2b"],function(v){BLAKE2b=v}]]);_750‍.w("./BLAKE2s.mjs",[["default",["BLAKE2s"],function(v){BLAKE2s=v}]]);_750‍.w("./Streebog.mjs",[["default",["Streebog"],function(v){Streebog=v}]]);_750‍.w("./GOSTHash.mjs",[["default",["GOSTHash"],function(v){GOSTHash=v}]]);/**
 * @author n1474335 [n1474335@gmail.com]
 * @copyright Crown Copyright 2016
 * @license Apache-2.0
 */































/**
 * Generate all hashes operation
 */
class GenerateAllHashes extends Operation {

    /**
     * GenerateAllHashes constructor
     */
    constructor() {
        super();

        this.name = "Generate all hashes";
        this.module = "Crypto";
        this.description = "Generates all available hashes and checksums for the input.";
        this.infoURL = "https://wikipedia.org/wiki/Comparison_of_cryptographic_hash_functions";
        this.inputType = "ArrayBuffer";
        this.outputType = "string";
        this.args = [];
    }

    /**
     * @param {ArrayBuffer} input
     * @param {Object[]} args
     * @returns {string}
     */
    run(input, args) {
        const arrayBuffer = input,
            str = Utils.arrayBufferToStr(arrayBuffer, false),
            byteArray = new Uint8Array(arrayBuffer),
            output = "MD2:          " + (new MD2()).run(arrayBuffer, []) +
                "\nMD4:          " + (new MD4()).run(arrayBuffer, []) +
                "\nMD5:          " + (new MD5()).run(arrayBuffer, []) +
                "\nMD6:          " + (new MD6()).run(str, []) +
                "\nSHA0:         " + (new SHA0()).run(arrayBuffer, []) +
                "\nSHA1:         " + (new SHA1()).run(arrayBuffer, []) +
                "\nSHA2 224:     " + (new SHA2()).run(arrayBuffer, ["224"]) +
                "\nSHA2 256:     " + (new SHA2()).run(arrayBuffer, ["256"]) +
                "\nSHA2 384:     " + (new SHA2()).run(arrayBuffer, ["384"]) +
                "\nSHA2 512:     " + (new SHA2()).run(arrayBuffer, ["512"]) +
                "\nSHA3 224:     " + (new SHA3()).run(arrayBuffer, ["224"]) +
                "\nSHA3 256:     " + (new SHA3()).run(arrayBuffer, ["256"]) +
                "\nSHA3 384:     " + (new SHA3()).run(arrayBuffer, ["384"]) +
                "\nSHA3 512:     " + (new SHA3()).run(arrayBuffer, ["512"]) +
                "\nKeccak 224:   " + (new Keccak()).run(arrayBuffer, ["224"]) +
                "\nKeccak 256:   " + (new Keccak()).run(arrayBuffer, ["256"]) +
                "\nKeccak 384:   " + (new Keccak()).run(arrayBuffer, ["384"]) +
                "\nKeccak 512:   " + (new Keccak()).run(arrayBuffer, ["512"]) +
                "\nShake 128:    " + (new Shake()).run(arrayBuffer, ["128", 256]) +
                "\nShake 256:    " + (new Shake()).run(arrayBuffer, ["256", 512]) +
                "\nRIPEMD-128:   " + (new RIPEMD()).run(arrayBuffer, ["128"]) +
                "\nRIPEMD-160:   " + (new RIPEMD()).run(arrayBuffer, ["160"]) +
                "\nRIPEMD-256:   " + (new RIPEMD()).run(arrayBuffer, ["256"]) +
                "\nRIPEMD-320:   " + (new RIPEMD()).run(arrayBuffer, ["320"]) +
                "\nHAS-160:      " + (new HAS160()).run(arrayBuffer, []) +
                "\nWhirlpool-0:  " + (new Whirlpool()).run(arrayBuffer, ["Whirlpool-0"]) +
                "\nWhirlpool-T:  " + (new Whirlpool()).run(arrayBuffer, ["Whirlpool-T"]) +
                "\nWhirlpool:    " + (new Whirlpool()).run(arrayBuffer, ["Whirlpool"]) +
                "\nBLAKE2b-128:  " + (new BLAKE2b).run(arrayBuffer, ["128", "Hex", {string: "", option: "UTF8"}]) +
                "\nBLAKE2b-160:  " + (new BLAKE2b).run(arrayBuffer, ["160", "Hex", {string: "", option: "UTF8"}]) +
                "\nBLAKE2b-256:  " + (new BLAKE2b).run(arrayBuffer, ["256", "Hex", {string: "", option: "UTF8"}]) +
                "\nBLAKE2b-384:  " + (new BLAKE2b).run(arrayBuffer, ["384", "Hex", {string: "", option: "UTF8"}]) +
                "\nBLAKE2b-512:  " + (new BLAKE2b).run(arrayBuffer, ["512", "Hex", {string: "", option: "UTF8"}]) +
                "\nBLAKE2s-128:  " + (new BLAKE2s).run(arrayBuffer, ["128", "Hex", {string: "", option: "UTF8"}]) +
                "\nBLAKE2s-160:  " + (new BLAKE2s).run(arrayBuffer, ["160", "Hex", {string: "", option: "UTF8"}]) +
                "\nBLAKE2s-256:  " + (new BLAKE2s).run(arrayBuffer, ["256", "Hex", {string: "", option: "UTF8"}]) +
                "\nStreebog-256: " + (new Streebog).run(arrayBuffer, ["256"]) +
                "\nStreebog-512: " + (new Streebog).run(arrayBuffer, ["512"]) +
                "\nGOST:         " + (new GOSTHash).run(arrayBuffer, ["D-A"]) +
                "\nSSDEEP:       " + (new SSDEEP()).run(str) +
                "\nCTPH:         " + (new CTPH()).run(str) +
                "\n\nChecksums:" +
                "\nFletcher-8:   " + (new Fletcher8Checksum).run(byteArray, []) +
                "\nFletcher-16:  " + (new Fletcher16Checksum).run(byteArray, []) +
                "\nFletcher-32:  " + (new Fletcher32Checksum).run(byteArray, []) +
                "\nFletcher-64:  " + (new Fletcher64Checksum).run(byteArray, []) +
                "\nAdler-32:     " + (new Adler32Checksum).run(byteArray, []) +
                "\nCRC-8:        " + (new CRC8Checksum).run(arrayBuffer, ["CRC-8"]) +
                "\nCRC-16:       " + (new CRC16Checksum).run(arrayBuffer, []) +
                "\nCRC-32:       " + (new CRC32Checksum).run(arrayBuffer, []);

        return output;
    }

}

_750‍.d(GenerateAllHashes);
