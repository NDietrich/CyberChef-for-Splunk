let NodeDish,_wrap,help,bake,_explainExcludedFunction,File,OperationError,DishError,ExcludedOperationError,core_A1Z26CipherDecode,core_A1Z26CipherEncode,core_ADD,core_AESDecrypt,core_AESEncrypt,core_AND,core_AddLineNumbers,core_AddTextToImage,core_Adler32Checksum,core_AffineCipherDecode,core_AffineCipherEncode,core_AnalyseHash,core_AtbashCipher,core_AvroToJSON,core_BLAKE2b,core_BLAKE2s,core_BSONDeserialise,core_BSONSerialise,core_BaconCipherDecode,core_BaconCipherEncode,core_Bcrypt,core_BcryptCompare,core_BcryptParse,core_BifidCipherDecode,core_BifidCipherEncode,core_BitShiftLeft,core_BitShiftRight,core_BlowfishDecrypt,core_BlowfishEncrypt,core_BlurImage,core_Bombe,core_Bzip2Compress,core_Bzip2Decompress,core_CBORDecode,core_CBOREncode,core_CRC16Checksum,core_CRC32Checksum,core_CRC8Checksum,core_CSSBeautify,core_CSSMinify,core_CSSSelector,core_CSVToJSON,core_CTPH,core_CartesianProduct,core_ChangeIPFormat,core_ChiSquare,core_CipherSaber2Decrypt,core_CipherSaber2Encrypt,core_CitrixCTX1Decode,core_CitrixCTX1Encode,core_Colossus,core_CompareCTPHHashes,core_CompareSSDEEPHashes,core_ContainImage,core_ConvertArea,core_ConvertCoordinateFormat,core_ConvertDataUnits,core_ConvertDistance,core_ConvertImageFormat,core_ConvertMass,core_ConvertSpeed,core_ConvertToNATOAlphabet,core_CountOccurrences,core_CoverImage,core_CropImage,core_DESDecrypt,core_DESEncrypt,core_DNSOverHTTPS,core_DechunkHTTPResponse,core_DecodeNetBIOSName,core_DecodeText,core_DefangIPAddresses,core_DefangURL,core_DeriveEVPKey,core_DerivePBKDF2Key,core_DetectFileType,core_Diff,core_DisassembleX86,core_DitherImage,core_Divide,core_DropBytes,core_EncodeNetBIOSName,core_EncodeText,core_Enigma,core_Entropy,core_EscapeString,core_EscapeUnicodeCharacters,core_ExpandAlphabetRange,core_ExtractDates,core_ExtractDomains,core_ExtractEXIF,core_ExtractEmailAddresses,core_ExtractFilePaths,core_ExtractFiles,core_ExtractID3,core_ExtractIPAddresses,core_ExtractLSB,core_ExtractMACAddresses,core_ExtractRGBA,core_ExtractURLs,core_Filter,core_FindReplace,core_Fletcher16Checksum,core_Fletcher32Checksum,core_Fletcher64Checksum,core_Fletcher8Checksum,core_FlipImage,core_FormatMACAddresses,core_FrequencyDistribution,core_FromBCD,core_FromBase,core_FromBase32,core_FromBase58,core_FromBase62,core_FromBase64,core_FromBase85,core_FromBinary,core_FromBraille,core_FromCaseInsensitiveRegex,core_FromCharcode,core_FromDecimal,core_FromHTMLEntity,core_FromHex,core_FromHexContent,core_FromHexdump,core_FromMessagePack,core_FromMorseCode,core_FromOctal,core_FromPunycode,core_FromQuotedPrintable,core_FromUNIXTimestamp,core_FuzzyMatch,core_GOSTHash,core_GenerateAllHashes,core_GenerateHOTP,core_GenerateImage,core_GenerateLoremIpsum,core_GeneratePGPKeyPair,core_GenerateQRCode,core_GenerateRSAKeyPair,core_GenerateTOTP,core_GenerateUUID,core_GenericCodeBeautify,core_GetTime,core_GroupIPAddresses,core_Gunzip,core_Gzip,core_HAS160,core_HASSHClientFingerprint,core_HASSHServerFingerprint,core_HMAC,core_HTMLToText,core_HTTPRequest,core_HammingDistance,core_HaversineDistance,core_Head,core_HeatmapChart,core_HexDensityChart,core_HexToObjectIdentifier,core_HexToPEM,core_ImageBrightnessContrast,core_ImageFilter,core_ImageHueSaturationLightness,core_ImageOpacity,core_IndexOfCoincidence,core_InvertImage,core_JA3Fingerprint,core_JA3SFingerprint,core_JPathExpression,core_JSONBeautify,core_JSONMinify,core_JSONToCSV,core_JWTDecode,core_JWTSign,core_JWTVerify,core_Keccak,core_Lorenz,core_LuhnChecksum,core_MD2,core_MD4,core_MD5,core_MD6,core_Magic,core_Mean,core_Median,core_MicrosoftScriptDecoder,core_MultipleBombe,core_Multiply,core_NOT,core_NormaliseImage,core_NormaliseUnicode,core_Numberwang,core_OR,core_ObjectIdentifierToHex,core_OffsetChecker,core_OpticalCharacterRecognition,core_PEMToHex,core_PGPDecrypt,core_PGPDecryptAndVerify,core_PGPEncrypt,core_PGPEncryptAndSign,core_PGPVerify,core_PHPDeserialize,core_PadLines,core_ParseASN1HexString,core_ParseColourCode,core_ParseDateTime,core_ParseIPRange,core_ParseIPv4Header,core_ParseIPv6Address,core_ParseObjectIDTimestamp,core_ParseQRCode,core_ParseSSHHostKey,core_ParseTLV,core_ParseUDP,core_ParseUNIXFilePermissions,core_ParseURI,core_ParseUserAgent,core_ParseX509Certificate,core_PlayMedia,core_PowerSet,core_ProtobufDecode,core_ProtobufEncode,core_PseudoRandomNumberGenerator,core_RC2Decrypt,core_RC2Encrypt,core_RC4,core_RC4Drop,core_RIPEMD,core_ROT13,core_ROT47,core_RSADecrypt,core_RSAEncrypt,core_RSASign,core_RSAVerify,core_RailFenceCipherDecode,core_RailFenceCipherEncode,core_RandomizeColourPalette,core_RawDeflate,core_RawInflate,core_Register,core_RegularExpression,core_RemoveDiacritics,core_RemoveEXIF,core_RemoveLineNumbers,core_RemoveNullBytes,core_RemoveWhitespace,core_RenderImage,core_RenderMarkdown,core_ResizeImage,core_Return,core_Reverse,core_RotateImage,core_RotateLeft,core_RotateRight,core_SHA0,core_SHA1,core_SHA2,core_SHA3,core_SM3,core_SQLBeautify,core_SQLMinify,core_SSDEEP,core_SUB,core_ScanForEmbeddedFiles,core_ScatterChart,core_Scrypt,core_SeriesChart,core_SetDifference,core_SetIntersection,core_SetUnion,core_Shake,core_SharpenImage,core_ShowBase64Offsets,core_ShowOnMap,core_Sleep,core_Snefru,core_Sort,core_Split,core_SplitColourChannels,core_StandardDeviation,core_Streebog,core_Strings,core_StripHTMLTags,core_StripHTTPHeaders,core_Subsection,core_Substitute,core_Subtract,core_Sum,core_SwapEndianness,core_SymmetricDifference,core_TCPIPChecksum,core_Tail,core_TakeBytes,core_Tar,core_TextEncodingBruteForce,core_ToBCD,core_ToBase,core_ToBase32,core_ToBase58,core_ToBase62,core_ToBase64,core_ToBase85,core_ToBinary,core_ToBraille,core_ToCamelCase,core_ToCaseInsensitiveRegex,core_ToCharcode,core_ToDecimal,core_ToHTMLEntity,core_ToHex,core_ToHexContent,core_ToHexdump,core_ToKebabCase,core_ToLowerCase,core_ToMessagePack,core_ToMorseCode,core_ToOctal,core_ToPunycode,core_ToQuotedPrintable,core_ToSnakeCase,core_ToTable,core_ToUNIXTimestamp,core_ToUpperCase,core_TranslateDateTimeFormat,core_TripleDESDecrypt,core_TripleDESEncrypt,core_Typex,core_UNIXTimestampToWindowsFiletime,core_URLDecode,core_URLEncode,core_UnescapeString,core_UnescapeUnicodeCharacters,core_UnicodeTextFormat,core_Unique,core_Untar,core_Unzip,core_VarIntDecode,core_VarIntEncode,core_ViewBitPlane,core_VigenèreDecode,core_VigenèreEncode,core_Whirlpool,core_WindowsFiletimeToUNIXTimestamp,core_XKCDRandomNumber,core_XMLBeautify,core_XMLMinify,core_XOR,core_XORBruteForce,core_XPathExpression,core_YARARules,core_Zip,core_ZlibDeflate,core_ZlibInflate;_52d‍.x([["default",()=>_52d‍.o],["operations",()=>operations],["A1Z26CipherDecode",()=>A1Z26CipherDecode],["A1Z26CipherEncode",()=>A1Z26CipherEncode],["ADD",()=>ADD],["AESDecrypt",()=>AESDecrypt],["AESEncrypt",()=>AESEncrypt],["AND",()=>AND],["addLineNumbers",()=>addLineNumbers],["addTextToImage",()=>addTextToImage],["adler32Checksum",()=>adler32Checksum],["affineCipherDecode",()=>affineCipherDecode],["affineCipherEncode",()=>affineCipherEncode],["analyseHash",()=>analyseHash],["atbashCipher",()=>atbashCipher],["avroToJSON",()=>avroToJSON],["BLAKE2b",()=>BLAKE2b],["BLAKE2s",()=>BLAKE2s],["BSONDeserialise",()=>BSONDeserialise],["BSONSerialise",()=>BSONSerialise],["baconCipherDecode",()=>baconCipherDecode],["baconCipherEncode",()=>baconCipherEncode],["bcrypt",()=>bcrypt],["bcryptCompare",()=>bcryptCompare],["bcryptParse",()=>bcryptParse],["bifidCipherDecode",()=>bifidCipherDecode],["bifidCipherEncode",()=>bifidCipherEncode],["bitShiftLeft",()=>bitShiftLeft],["bitShiftRight",()=>bitShiftRight],["blowfishDecrypt",()=>blowfishDecrypt],["blowfishEncrypt",()=>blowfishEncrypt],["blurImage",()=>blurImage],["bombe",()=>bombe],["bzip2Compress",()=>bzip2Compress],["bzip2Decompress",()=>bzip2Decompress],["CBORDecode",()=>CBORDecode],["CBOREncode",()=>CBOREncode],["CRC16Checksum",()=>CRC16Checksum],["CRC32Checksum",()=>CRC32Checksum],["CRC8Checksum",()=>CRC8Checksum],["CSSBeautify",()=>CSSBeautify],["CSSMinify",()=>CSSMinify],["CSSSelector",()=>CSSSelector],["CSVToJSON",()=>CSVToJSON],["CTPH",()=>CTPH],["cartesianProduct",()=>cartesianProduct],["changeIPFormat",()=>changeIPFormat],["chiSquare",()=>chiSquare],["cipherSaber2Decrypt",()=>cipherSaber2Decrypt],["cipherSaber2Encrypt",()=>cipherSaber2Encrypt],["citrixCTX1Decode",()=>citrixCTX1Decode],["citrixCTX1Encode",()=>citrixCTX1Encode],["colossus",()=>colossus],["comment",()=>comment],["compareCTPHHashes",()=>compareCTPHHashes],["compareSSDEEPHashes",()=>compareSSDEEPHashes],["conditionalJump",()=>conditionalJump],["containImage",()=>containImage],["convertArea",()=>convertArea],["convertCoordinateFormat",()=>convertCoordinateFormat],["convertDataUnits",()=>convertDataUnits],["convertDistance",()=>convertDistance],["convertImageFormat",()=>convertImageFormat],["convertMass",()=>convertMass],["convertSpeed",()=>convertSpeed],["convertToNATOAlphabet",()=>convertToNATOAlphabet],["countOccurrences",()=>countOccurrences],["coverImage",()=>coverImage],["cropImage",()=>cropImage],["DESDecrypt",()=>DESDecrypt],["DESEncrypt",()=>DESEncrypt],["DNSOverHTTPS",()=>DNSOverHTTPS],["dechunkHTTPResponse",()=>dechunkHTTPResponse],["decodeNetBIOSName",()=>decodeNetBIOSName],["decodeText",()=>decodeText],["defangIPAddresses",()=>defangIPAddresses],["defangURL",()=>defangURL],["deriveEVPKey",()=>deriveEVPKey],["derivePBKDF2Key",()=>derivePBKDF2Key],["detectFileType",()=>detectFileType],["diff",()=>diff],["disassembleX86",()=>disassembleX86],["ditherImage",()=>ditherImage],["divide",()=>divide],["dropBytes",()=>dropBytes],["encodeNetBIOSName",()=>encodeNetBIOSName],["encodeText",()=>encodeText],["enigma",()=>enigma],["entropy",()=>entropy],["escapeString",()=>escapeString],["escapeUnicodeCharacters",()=>escapeUnicodeCharacters],["expandAlphabetRange",()=>expandAlphabetRange],["extractDates",()=>extractDates],["extractDomains",()=>extractDomains],["extractEXIF",()=>extractEXIF],["extractEmailAddresses",()=>extractEmailAddresses],["extractFilePaths",()=>extractFilePaths],["extractFiles",()=>extractFiles],["extractID3",()=>extractID3],["extractIPAddresses",()=>extractIPAddresses],["extractLSB",()=>extractLSB],["extractMACAddresses",()=>extractMACAddresses],["extractRGBA",()=>extractRGBA],["extractURLs",()=>extractURLs],["filter",()=>filter],["findReplace",()=>findReplace],["fletcher16Checksum",()=>fletcher16Checksum],["fletcher32Checksum",()=>fletcher32Checksum],["fletcher64Checksum",()=>fletcher64Checksum],["fletcher8Checksum",()=>fletcher8Checksum],["flipImage",()=>flipImage],["fork",()=>fork],["formatMACAddresses",()=>formatMACAddresses],["frequencyDistribution",()=>frequencyDistribution],["fromBCD",()=>fromBCD],["fromBase",()=>fromBase],["fromBase32",()=>fromBase32],["fromBase58",()=>fromBase58],["fromBase62",()=>fromBase62],["fromBase64",()=>fromBase64],["fromBase85",()=>fromBase85],["fromBinary",()=>fromBinary],["fromBraille",()=>fromBraille],["fromCaseInsensitiveRegex",()=>fromCaseInsensitiveRegex],["fromCharcode",()=>fromCharcode],["fromDecimal",()=>fromDecimal],["fromHTMLEntity",()=>fromHTMLEntity],["fromHex",()=>fromHex],["fromHexContent",()=>fromHexContent],["fromHexdump",()=>fromHexdump],["fromMessagePack",()=>fromMessagePack],["fromMorseCode",()=>fromMorseCode],["fromOctal",()=>fromOctal],["fromPunycode",()=>fromPunycode],["fromQuotedPrintable",()=>fromQuotedPrintable],["fromUNIXTimestamp",()=>fromUNIXTimestamp],["fuzzyMatch",()=>fuzzyMatch],["GOSTHash",()=>GOSTHash],["generateAllHashes",()=>generateAllHashes],["generateHOTP",()=>generateHOTP],["generateImage",()=>generateImage],["generateLoremIpsum",()=>generateLoremIpsum],["generatePGPKeyPair",()=>generatePGPKeyPair],["generateQRCode",()=>generateQRCode],["generateRSAKeyPair",()=>generateRSAKeyPair],["generateTOTP",()=>generateTOTP],["generateUUID",()=>generateUUID],["genericCodeBeautify",()=>genericCodeBeautify],["getTime",()=>getTime],["groupIPAddresses",()=>groupIPAddresses],["gunzip",()=>gunzip],["gzip",()=>gzip],["HAS160",()=>HAS160],["HASSHClientFingerprint",()=>HASSHClientFingerprint],["HASSHServerFingerprint",()=>HASSHServerFingerprint],["HMAC",()=>HMAC],["HTMLToText",()=>HTMLToText],["HTTPRequest",()=>HTTPRequest],["hammingDistance",()=>hammingDistance],["haversineDistance",()=>haversineDistance],["head",()=>head],["heatmapChart",()=>heatmapChart],["hexDensityChart",()=>hexDensityChart],["hexToObjectIdentifier",()=>hexToObjectIdentifier],["hexToPEM",()=>hexToPEM],["imageBrightnessContrast",()=>imageBrightnessContrast],["imageFilter",()=>imageFilter],["imageHueSaturationLightness",()=>imageHueSaturationLightness],["imageOpacity",()=>imageOpacity],["indexOfCoincidence",()=>indexOfCoincidence],["invertImage",()=>invertImage],["JA3Fingerprint",()=>JA3Fingerprint],["JA3SFingerprint",()=>JA3SFingerprint],["JPathExpression",()=>JPathExpression],["JSONBeautify",()=>JSONBeautify],["JSONMinify",()=>JSONMinify],["JSONToCSV",()=>JSONToCSV],["JWTDecode",()=>JWTDecode],["JWTSign",()=>JWTSign],["JWTVerify",()=>JWTVerify],["javaScriptBeautify",()=>javaScriptBeautify],["javaScriptMinify",()=>javaScriptMinify],["javaScriptParser",()=>javaScriptParser],["jump",()=>jump],["keccak",()=>keccak],["label",()=>label],["lorenz",()=>lorenz],["luhnChecksum",()=>luhnChecksum],["MD2",()=>MD2],["MD4",()=>MD4],["MD5",()=>MD5],["MD6",()=>MD6],["magic",()=>magic],["mean",()=>mean],["median",()=>median],["merge",()=>merge],["microsoftScriptDecoder",()=>microsoftScriptDecoder],["multipleBombe",()=>multipleBombe],["multiply",()=>multiply],["NOT",()=>NOT],["normaliseImage",()=>normaliseImage],["normaliseUnicode",()=>normaliseUnicode],["numberwang",()=>numberwang],["OR",()=>OR],["objectIdentifierToHex",()=>objectIdentifierToHex],["offsetChecker",()=>offsetChecker],["opticalCharacterRecognition",()=>opticalCharacterRecognition],["PEMToHex",()=>PEMToHex],["PGPDecrypt",()=>PGPDecrypt],["PGPDecryptAndVerify",()=>PGPDecryptAndVerify],["PGPEncrypt",()=>PGPEncrypt],["PGPEncryptAndSign",()=>PGPEncryptAndSign],["PGPVerify",()=>PGPVerify],["PHPDeserialize",()=>PHPDeserialize],["padLines",()=>padLines],["parseASN1HexString",()=>parseASN1HexString],["parseColourCode",()=>parseColourCode],["parseDateTime",()=>parseDateTime],["parseIPRange",()=>parseIPRange],["parseIPv4Header",()=>parseIPv4Header],["parseIPv6Address",()=>parseIPv6Address],["parseObjectIDTimestamp",()=>parseObjectIDTimestamp],["parseQRCode",()=>parseQRCode],["parseSSHHostKey",()=>parseSSHHostKey],["parseTLV",()=>parseTLV],["parseUDP",()=>parseUDP],["parseUNIXFilePermissions",()=>parseUNIXFilePermissions],["parseURI",()=>parseURI],["parseUserAgent",()=>parseUserAgent],["parseX509Certificate",()=>parseX509Certificate],["playMedia",()=>playMedia],["powerSet",()=>powerSet],["protobufDecode",()=>protobufDecode],["protobufEncode",()=>protobufEncode],["pseudoRandomNumberGenerator",()=>pseudoRandomNumberGenerator],["RC2Decrypt",()=>RC2Decrypt],["RC2Encrypt",()=>RC2Encrypt],["RC4",()=>RC4],["RC4Drop",()=>RC4Drop],["RIPEMD",()=>RIPEMD],["ROT13",()=>ROT13],["ROT47",()=>ROT47],["RSADecrypt",()=>RSADecrypt],["RSAEncrypt",()=>RSAEncrypt],["RSASign",()=>RSASign],["RSAVerify",()=>RSAVerify],["railFenceCipherDecode",()=>railFenceCipherDecode],["railFenceCipherEncode",()=>railFenceCipherEncode],["randomizeColourPalette",()=>randomizeColourPalette],["rawDeflate",()=>rawDeflate],["rawInflate",()=>rawInflate],["register",()=>register],["regularExpression",()=>regularExpression],["removeDiacritics",()=>removeDiacritics],["removeEXIF",()=>removeEXIF],["removeLineNumbers",()=>removeLineNumbers],["removeNullBytes",()=>removeNullBytes],["removeWhitespace",()=>removeWhitespace],["renderImage",()=>renderImage],["renderMarkdown",()=>renderMarkdown],["resizeImage",()=>resizeImage],["Return",()=>Return],["reverse",()=>reverse],["rotateImage",()=>rotateImage],["rotateLeft",()=>rotateLeft],["rotateRight",()=>rotateRight],["SHA0",()=>SHA0],["SHA1",()=>SHA1],["SHA2",()=>SHA2],["SHA3",()=>SHA3],["SM3",()=>SM3],["SQLBeautify",()=>SQLBeautify],["SQLMinify",()=>SQLMinify],["SSDEEP",()=>SSDEEP],["SUB",()=>SUB],["scanForEmbeddedFiles",()=>scanForEmbeddedFiles],["scatterChart",()=>scatterChart],["scrypt",()=>scrypt],["seriesChart",()=>seriesChart],["setDifference",()=>setDifference],["setIntersection",()=>setIntersection],["setUnion",()=>setUnion],["shake",()=>shake],["sharpenImage",()=>sharpenImage],["showBase64Offsets",()=>showBase64Offsets],["showOnMap",()=>showOnMap],["sleep",()=>sleep],["snefru",()=>snefru],["sort",()=>sort],["split",()=>split],["splitColourChannels",()=>splitColourChannels],["standardDeviation",()=>standardDeviation],["streebog",()=>streebog],["strings",()=>strings],["stripHTMLTags",()=>stripHTMLTags],["stripHTTPHeaders",()=>stripHTTPHeaders],["subsection",()=>subsection],["substitute",()=>substitute],["subtract",()=>subtract],["sum",()=>sum],["swapEndianness",()=>swapEndianness],["symmetricDifference",()=>symmetricDifference],["syntaxHighlighter",()=>syntaxHighlighter],["TCPIPChecksum",()=>TCPIPChecksum],["tail",()=>tail],["takeBytes",()=>takeBytes],["tar",()=>tar],["textEncodingBruteForce",()=>textEncodingBruteForce],["toBCD",()=>toBCD],["toBase",()=>toBase],["toBase32",()=>toBase32],["toBase58",()=>toBase58],["toBase62",()=>toBase62],["toBase64",()=>toBase64],["toBase85",()=>toBase85],["toBinary",()=>toBinary],["toBraille",()=>toBraille],["toCamelCase",()=>toCamelCase],["toCaseInsensitiveRegex",()=>toCaseInsensitiveRegex],["toCharcode",()=>toCharcode],["toDecimal",()=>toDecimal],["toHTMLEntity",()=>toHTMLEntity],["toHex",()=>toHex],["toHexContent",()=>toHexContent],["toHexdump",()=>toHexdump],["toKebabCase",()=>toKebabCase],["toLowerCase",()=>toLowerCase],["toMessagePack",()=>toMessagePack],["toMorseCode",()=>toMorseCode],["toOctal",()=>toOctal],["toPunycode",()=>toPunycode],["toQuotedPrintable",()=>toQuotedPrintable],["toSnakeCase",()=>toSnakeCase],["toTable",()=>toTable],["toUNIXTimestamp",()=>toUNIXTimestamp],["toUpperCase",()=>toUpperCase],["translateDateTimeFormat",()=>translateDateTimeFormat],["tripleDESDecrypt",()=>tripleDESDecrypt],["tripleDESEncrypt",()=>tripleDESEncrypt],["typex",()=>typex],["UNIXTimestampToWindowsFiletime",()=>UNIXTimestampToWindowsFiletime],["URLDecode",()=>URLDecode],["URLEncode",()=>URLEncode],["unescapeString",()=>unescapeString],["unescapeUnicodeCharacters",()=>unescapeUnicodeCharacters],["unicodeTextFormat",()=>unicodeTextFormat],["unique",()=>unique],["untar",()=>untar],["unzip",()=>unzip],["varIntDecode",()=>varIntDecode],["varIntEncode",()=>varIntEncode],["viewBitPlane",()=>viewBitPlane],["vigenèreDecode",()=>vigenèreDecode],["vigenèreEncode",()=>vigenèreEncode],["whirlpool",()=>whirlpool],["windowsFiletimeToUNIXTimestamp",()=>windowsFiletimeToUNIXTimestamp],["XKCDRandomNumber",()=>XKCDRandomNumber],["XMLBeautify",()=>XMLBeautify],["XMLMinify",()=>XMLMinify],["XOR",()=>XOR],["XORBruteForce",()=>XORBruteForce],["XPathExpression",()=>XPathExpression],["YARARules",()=>YARARules],["zip",()=>zip],["zlibDeflate",()=>zlibDeflate],["zlibInflate",()=>zlibInflate],["Dish",()=>NodeDish],["bake",()=>bake],["help",()=>help],["OperationError",()=>OperationError],["ExcludedOperationError",()=>ExcludedOperationError],["DishError",()=>DishError]]);_52d‍.w("./NodeDish.mjs",[["default",["NodeDish"],function(v){NodeDish=v}]]);_52d‍.w("./api.mjs",[["_wrap",["_wrap"],function(v){_wrap=v}],["help",["help"],function(v){help=v}],["bake",["bake"],function(v){bake=v}],["_explainExcludedFunction",["_explainExcludedFunction"],function(v){_explainExcludedFunction=v}]]);_52d‍.w("./File.mjs",[["default",["File"],function(v){File=v}]]);_52d‍.w("../core/errors/index",[["OperationError",["OperationError"],function(v){OperationError=v}],["DishError",["DishError"],function(v){DishError=v}],["ExcludedOperationError",["ExcludedOperationError"],function(v){ExcludedOperationError=v}]]);_52d‍.w("../core/operations/index",[["A1Z26CipherDecode",["core_A1Z26CipherDecode"],function(v){core_A1Z26CipherDecode=v}],["A1Z26CipherEncode",["core_A1Z26CipherEncode"],function(v){core_A1Z26CipherEncode=v}],["ADD",["core_ADD"],function(v){core_ADD=v}],["AESDecrypt",["core_AESDecrypt"],function(v){core_AESDecrypt=v}],["AESEncrypt",["core_AESEncrypt"],function(v){core_AESEncrypt=v}],["AND",["core_AND"],function(v){core_AND=v}],["AddLineNumbers",["core_AddLineNumbers"],function(v){core_AddLineNumbers=v}],["AddTextToImage",["core_AddTextToImage"],function(v){core_AddTextToImage=v}],["Adler32Checksum",["core_Adler32Checksum"],function(v){core_Adler32Checksum=v}],["AffineCipherDecode",["core_AffineCipherDecode"],function(v){core_AffineCipherDecode=v}],["AffineCipherEncode",["core_AffineCipherEncode"],function(v){core_AffineCipherEncode=v}],["AnalyseHash",["core_AnalyseHash"],function(v){core_AnalyseHash=v}],["AtbashCipher",["core_AtbashCipher"],function(v){core_AtbashCipher=v}],["AvroToJSON",["core_AvroToJSON"],function(v){core_AvroToJSON=v}],["BLAKE2b",["core_BLAKE2b"],function(v){core_BLAKE2b=v}],["BLAKE2s",["core_BLAKE2s"],function(v){core_BLAKE2s=v}],["BSONDeserialise",["core_BSONDeserialise"],function(v){core_BSONDeserialise=v}],["BSONSerialise",["core_BSONSerialise"],function(v){core_BSONSerialise=v}],["BaconCipherDecode",["core_BaconCipherDecode"],function(v){core_BaconCipherDecode=v}],["BaconCipherEncode",["core_BaconCipherEncode"],function(v){core_BaconCipherEncode=v}],["Bcrypt",["core_Bcrypt"],function(v){core_Bcrypt=v}],["BcryptCompare",["core_BcryptCompare"],function(v){core_BcryptCompare=v}],["BcryptParse",["core_BcryptParse"],function(v){core_BcryptParse=v}],["BifidCipherDecode",["core_BifidCipherDecode"],function(v){core_BifidCipherDecode=v}],["BifidCipherEncode",["core_BifidCipherEncode"],function(v){core_BifidCipherEncode=v}],["BitShiftLeft",["core_BitShiftLeft"],function(v){core_BitShiftLeft=v}],["BitShiftRight",["core_BitShiftRight"],function(v){core_BitShiftRight=v}],["BlowfishDecrypt",["core_BlowfishDecrypt"],function(v){core_BlowfishDecrypt=v}],["BlowfishEncrypt",["core_BlowfishEncrypt"],function(v){core_BlowfishEncrypt=v}],["BlurImage",["core_BlurImage"],function(v){core_BlurImage=v}],["Bombe",["core_Bombe"],function(v){core_Bombe=v}],["Bzip2Compress",["core_Bzip2Compress"],function(v){core_Bzip2Compress=v}],["Bzip2Decompress",["core_Bzip2Decompress"],function(v){core_Bzip2Decompress=v}],["CBORDecode",["core_CBORDecode"],function(v){core_CBORDecode=v}],["CBOREncode",["core_CBOREncode"],function(v){core_CBOREncode=v}],["CRC16Checksum",["core_CRC16Checksum"],function(v){core_CRC16Checksum=v}],["CRC32Checksum",["core_CRC32Checksum"],function(v){core_CRC32Checksum=v}],["CRC8Checksum",["core_CRC8Checksum"],function(v){core_CRC8Checksum=v}],["CSSBeautify",["core_CSSBeautify"],function(v){core_CSSBeautify=v}],["CSSMinify",["core_CSSMinify"],function(v){core_CSSMinify=v}],["CSSSelector",["core_CSSSelector"],function(v){core_CSSSelector=v}],["CSVToJSON",["core_CSVToJSON"],function(v){core_CSVToJSON=v}],["CTPH",["core_CTPH"],function(v){core_CTPH=v}],["CartesianProduct",["core_CartesianProduct"],function(v){core_CartesianProduct=v}],["ChangeIPFormat",["core_ChangeIPFormat"],function(v){core_ChangeIPFormat=v}],["ChiSquare",["core_ChiSquare"],function(v){core_ChiSquare=v}],["CipherSaber2Decrypt",["core_CipherSaber2Decrypt"],function(v){core_CipherSaber2Decrypt=v}],["CipherSaber2Encrypt",["core_CipherSaber2Encrypt"],function(v){core_CipherSaber2Encrypt=v}],["CitrixCTX1Decode",["core_CitrixCTX1Decode"],function(v){core_CitrixCTX1Decode=v}],["CitrixCTX1Encode",["core_CitrixCTX1Encode"],function(v){core_CitrixCTX1Encode=v}],["Colossus",["core_Colossus"],function(v){core_Colossus=v}],["CompareCTPHHashes",["core_CompareCTPHHashes"],function(v){core_CompareCTPHHashes=v}],["CompareSSDEEPHashes",["core_CompareSSDEEPHashes"],function(v){core_CompareSSDEEPHashes=v}],["ContainImage",["core_ContainImage"],function(v){core_ContainImage=v}],["ConvertArea",["core_ConvertArea"],function(v){core_ConvertArea=v}],["ConvertCoordinateFormat",["core_ConvertCoordinateFormat"],function(v){core_ConvertCoordinateFormat=v}],["ConvertDataUnits",["core_ConvertDataUnits"],function(v){core_ConvertDataUnits=v}],["ConvertDistance",["core_ConvertDistance"],function(v){core_ConvertDistance=v}],["ConvertImageFormat",["core_ConvertImageFormat"],function(v){core_ConvertImageFormat=v}],["ConvertMass",["core_ConvertMass"],function(v){core_ConvertMass=v}],["ConvertSpeed",["core_ConvertSpeed"],function(v){core_ConvertSpeed=v}],["ConvertToNATOAlphabet",["core_ConvertToNATOAlphabet"],function(v){core_ConvertToNATOAlphabet=v}],["CountOccurrences",["core_CountOccurrences"],function(v){core_CountOccurrences=v}],["CoverImage",["core_CoverImage"],function(v){core_CoverImage=v}],["CropImage",["core_CropImage"],function(v){core_CropImage=v}],["DESDecrypt",["core_DESDecrypt"],function(v){core_DESDecrypt=v}],["DESEncrypt",["core_DESEncrypt"],function(v){core_DESEncrypt=v}],["DNSOverHTTPS",["core_DNSOverHTTPS"],function(v){core_DNSOverHTTPS=v}],["DechunkHTTPResponse",["core_DechunkHTTPResponse"],function(v){core_DechunkHTTPResponse=v}],["DecodeNetBIOSName",["core_DecodeNetBIOSName"],function(v){core_DecodeNetBIOSName=v}],["DecodeText",["core_DecodeText"],function(v){core_DecodeText=v}],["DefangIPAddresses",["core_DefangIPAddresses"],function(v){core_DefangIPAddresses=v}],["DefangURL",["core_DefangURL"],function(v){core_DefangURL=v}],["DeriveEVPKey",["core_DeriveEVPKey"],function(v){core_DeriveEVPKey=v}],["DerivePBKDF2Key",["core_DerivePBKDF2Key"],function(v){core_DerivePBKDF2Key=v}],["DetectFileType",["core_DetectFileType"],function(v){core_DetectFileType=v}],["Diff",["core_Diff"],function(v){core_Diff=v}],["DisassembleX86",["core_DisassembleX86"],function(v){core_DisassembleX86=v}],["DitherImage",["core_DitherImage"],function(v){core_DitherImage=v}],["Divide",["core_Divide"],function(v){core_Divide=v}],["DropBytes",["core_DropBytes"],function(v){core_DropBytes=v}],["EncodeNetBIOSName",["core_EncodeNetBIOSName"],function(v){core_EncodeNetBIOSName=v}],["EncodeText",["core_EncodeText"],function(v){core_EncodeText=v}],["Enigma",["core_Enigma"],function(v){core_Enigma=v}],["Entropy",["core_Entropy"],function(v){core_Entropy=v}],["EscapeString",["core_EscapeString"],function(v){core_EscapeString=v}],["EscapeUnicodeCharacters",["core_EscapeUnicodeCharacters"],function(v){core_EscapeUnicodeCharacters=v}],["ExpandAlphabetRange",["core_ExpandAlphabetRange"],function(v){core_ExpandAlphabetRange=v}],["ExtractDates",["core_ExtractDates"],function(v){core_ExtractDates=v}],["ExtractDomains",["core_ExtractDomains"],function(v){core_ExtractDomains=v}],["ExtractEXIF",["core_ExtractEXIF"],function(v){core_ExtractEXIF=v}],["ExtractEmailAddresses",["core_ExtractEmailAddresses"],function(v){core_ExtractEmailAddresses=v}],["ExtractFilePaths",["core_ExtractFilePaths"],function(v){core_ExtractFilePaths=v}],["ExtractFiles",["core_ExtractFiles"],function(v){core_ExtractFiles=v}],["ExtractID3",["core_ExtractID3"],function(v){core_ExtractID3=v}],["ExtractIPAddresses",["core_ExtractIPAddresses"],function(v){core_ExtractIPAddresses=v}],["ExtractLSB",["core_ExtractLSB"],function(v){core_ExtractLSB=v}],["ExtractMACAddresses",["core_ExtractMACAddresses"],function(v){core_ExtractMACAddresses=v}],["ExtractRGBA",["core_ExtractRGBA"],function(v){core_ExtractRGBA=v}],["ExtractURLs",["core_ExtractURLs"],function(v){core_ExtractURLs=v}],["Filter",["core_Filter"],function(v){core_Filter=v}],["FindReplace",["core_FindReplace"],function(v){core_FindReplace=v}],["Fletcher16Checksum",["core_Fletcher16Checksum"],function(v){core_Fletcher16Checksum=v}],["Fletcher32Checksum",["core_Fletcher32Checksum"],function(v){core_Fletcher32Checksum=v}],["Fletcher64Checksum",["core_Fletcher64Checksum"],function(v){core_Fletcher64Checksum=v}],["Fletcher8Checksum",["core_Fletcher8Checksum"],function(v){core_Fletcher8Checksum=v}],["FlipImage",["core_FlipImage"],function(v){core_FlipImage=v}],["FormatMACAddresses",["core_FormatMACAddresses"],function(v){core_FormatMACAddresses=v}],["FrequencyDistribution",["core_FrequencyDistribution"],function(v){core_FrequencyDistribution=v}],["FromBCD",["core_FromBCD"],function(v){core_FromBCD=v}],["FromBase",["core_FromBase"],function(v){core_FromBase=v}],["FromBase32",["core_FromBase32"],function(v){core_FromBase32=v}],["FromBase58",["core_FromBase58"],function(v){core_FromBase58=v}],["FromBase62",["core_FromBase62"],function(v){core_FromBase62=v}],["FromBase64",["core_FromBase64"],function(v){core_FromBase64=v}],["FromBase85",["core_FromBase85"],function(v){core_FromBase85=v}],["FromBinary",["core_FromBinary"],function(v){core_FromBinary=v}],["FromBraille",["core_FromBraille"],function(v){core_FromBraille=v}],["FromCaseInsensitiveRegex",["core_FromCaseInsensitiveRegex"],function(v){core_FromCaseInsensitiveRegex=v}],["FromCharcode",["core_FromCharcode"],function(v){core_FromCharcode=v}],["FromDecimal",["core_FromDecimal"],function(v){core_FromDecimal=v}],["FromHTMLEntity",["core_FromHTMLEntity"],function(v){core_FromHTMLEntity=v}],["FromHex",["core_FromHex"],function(v){core_FromHex=v}],["FromHexContent",["core_FromHexContent"],function(v){core_FromHexContent=v}],["FromHexdump",["core_FromHexdump"],function(v){core_FromHexdump=v}],["FromMessagePack",["core_FromMessagePack"],function(v){core_FromMessagePack=v}],["FromMorseCode",["core_FromMorseCode"],function(v){core_FromMorseCode=v}],["FromOctal",["core_FromOctal"],function(v){core_FromOctal=v}],["FromPunycode",["core_FromPunycode"],function(v){core_FromPunycode=v}],["FromQuotedPrintable",["core_FromQuotedPrintable"],function(v){core_FromQuotedPrintable=v}],["FromUNIXTimestamp",["core_FromUNIXTimestamp"],function(v){core_FromUNIXTimestamp=v}],["FuzzyMatch",["core_FuzzyMatch"],function(v){core_FuzzyMatch=v}],["GOSTHash",["core_GOSTHash"],function(v){core_GOSTHash=v}],["GenerateAllHashes",["core_GenerateAllHashes"],function(v){core_GenerateAllHashes=v}],["GenerateHOTP",["core_GenerateHOTP"],function(v){core_GenerateHOTP=v}],["GenerateImage",["core_GenerateImage"],function(v){core_GenerateImage=v}],["GenerateLoremIpsum",["core_GenerateLoremIpsum"],function(v){core_GenerateLoremIpsum=v}],["GeneratePGPKeyPair",["core_GeneratePGPKeyPair"],function(v){core_GeneratePGPKeyPair=v}],["GenerateQRCode",["core_GenerateQRCode"],function(v){core_GenerateQRCode=v}],["GenerateRSAKeyPair",["core_GenerateRSAKeyPair"],function(v){core_GenerateRSAKeyPair=v}],["GenerateTOTP",["core_GenerateTOTP"],function(v){core_GenerateTOTP=v}],["GenerateUUID",["core_GenerateUUID"],function(v){core_GenerateUUID=v}],["GenericCodeBeautify",["core_GenericCodeBeautify"],function(v){core_GenericCodeBeautify=v}],["GetTime",["core_GetTime"],function(v){core_GetTime=v}],["GroupIPAddresses",["core_GroupIPAddresses"],function(v){core_GroupIPAddresses=v}],["Gunzip",["core_Gunzip"],function(v){core_Gunzip=v}],["Gzip",["core_Gzip"],function(v){core_Gzip=v}],["HAS160",["core_HAS160"],function(v){core_HAS160=v}],["HASSHClientFingerprint",["core_HASSHClientFingerprint"],function(v){core_HASSHClientFingerprint=v}],["HASSHServerFingerprint",["core_HASSHServerFingerprint"],function(v){core_HASSHServerFingerprint=v}],["HMAC",["core_HMAC"],function(v){core_HMAC=v}],["HTMLToText",["core_HTMLToText"],function(v){core_HTMLToText=v}],["HTTPRequest",["core_HTTPRequest"],function(v){core_HTTPRequest=v}],["HammingDistance",["core_HammingDistance"],function(v){core_HammingDistance=v}],["HaversineDistance",["core_HaversineDistance"],function(v){core_HaversineDistance=v}],["Head",["core_Head"],function(v){core_Head=v}],["HeatmapChart",["core_HeatmapChart"],function(v){core_HeatmapChart=v}],["HexDensityChart",["core_HexDensityChart"],function(v){core_HexDensityChart=v}],["HexToObjectIdentifier",["core_HexToObjectIdentifier"],function(v){core_HexToObjectIdentifier=v}],["HexToPEM",["core_HexToPEM"],function(v){core_HexToPEM=v}],["ImageBrightnessContrast",["core_ImageBrightnessContrast"],function(v){core_ImageBrightnessContrast=v}],["ImageFilter",["core_ImageFilter"],function(v){core_ImageFilter=v}],["ImageHueSaturationLightness",["core_ImageHueSaturationLightness"],function(v){core_ImageHueSaturationLightness=v}],["ImageOpacity",["core_ImageOpacity"],function(v){core_ImageOpacity=v}],["IndexOfCoincidence",["core_IndexOfCoincidence"],function(v){core_IndexOfCoincidence=v}],["InvertImage",["core_InvertImage"],function(v){core_InvertImage=v}],["JA3Fingerprint",["core_JA3Fingerprint"],function(v){core_JA3Fingerprint=v}],["JA3SFingerprint",["core_JA3SFingerprint"],function(v){core_JA3SFingerprint=v}],["JPathExpression",["core_JPathExpression"],function(v){core_JPathExpression=v}],["JSONBeautify",["core_JSONBeautify"],function(v){core_JSONBeautify=v}],["JSONMinify",["core_JSONMinify"],function(v){core_JSONMinify=v}],["JSONToCSV",["core_JSONToCSV"],function(v){core_JSONToCSV=v}],["JWTDecode",["core_JWTDecode"],function(v){core_JWTDecode=v}],["JWTSign",["core_JWTSign"],function(v){core_JWTSign=v}],["JWTVerify",["core_JWTVerify"],function(v){core_JWTVerify=v}],["Keccak",["core_Keccak"],function(v){core_Keccak=v}],["Lorenz",["core_Lorenz"],function(v){core_Lorenz=v}],["LuhnChecksum",["core_LuhnChecksum"],function(v){core_LuhnChecksum=v}],["MD2",["core_MD2"],function(v){core_MD2=v}],["MD4",["core_MD4"],function(v){core_MD4=v}],["MD5",["core_MD5"],function(v){core_MD5=v}],["MD6",["core_MD6"],function(v){core_MD6=v}],["Magic",["core_Magic"],function(v){core_Magic=v}],["Mean",["core_Mean"],function(v){core_Mean=v}],["Median",["core_Median"],function(v){core_Median=v}],["MicrosoftScriptDecoder",["core_MicrosoftScriptDecoder"],function(v){core_MicrosoftScriptDecoder=v}],["MultipleBombe",["core_MultipleBombe"],function(v){core_MultipleBombe=v}],["Multiply",["core_Multiply"],function(v){core_Multiply=v}],["NOT",["core_NOT"],function(v){core_NOT=v}],["NormaliseImage",["core_NormaliseImage"],function(v){core_NormaliseImage=v}],["NormaliseUnicode",["core_NormaliseUnicode"],function(v){core_NormaliseUnicode=v}],["Numberwang",["core_Numberwang"],function(v){core_Numberwang=v}],["OR",["core_OR"],function(v){core_OR=v}],["ObjectIdentifierToHex",["core_ObjectIdentifierToHex"],function(v){core_ObjectIdentifierToHex=v}],["OffsetChecker",["core_OffsetChecker"],function(v){core_OffsetChecker=v}],["OpticalCharacterRecognition",["core_OpticalCharacterRecognition"],function(v){core_OpticalCharacterRecognition=v}],["PEMToHex",["core_PEMToHex"],function(v){core_PEMToHex=v}],["PGPDecrypt",["core_PGPDecrypt"],function(v){core_PGPDecrypt=v}],["PGPDecryptAndVerify",["core_PGPDecryptAndVerify"],function(v){core_PGPDecryptAndVerify=v}],["PGPEncrypt",["core_PGPEncrypt"],function(v){core_PGPEncrypt=v}],["PGPEncryptAndSign",["core_PGPEncryptAndSign"],function(v){core_PGPEncryptAndSign=v}],["PGPVerify",["core_PGPVerify"],function(v){core_PGPVerify=v}],["PHPDeserialize",["core_PHPDeserialize"],function(v){core_PHPDeserialize=v}],["PadLines",["core_PadLines"],function(v){core_PadLines=v}],["ParseASN1HexString",["core_ParseASN1HexString"],function(v){core_ParseASN1HexString=v}],["ParseColourCode",["core_ParseColourCode"],function(v){core_ParseColourCode=v}],["ParseDateTime",["core_ParseDateTime"],function(v){core_ParseDateTime=v}],["ParseIPRange",["core_ParseIPRange"],function(v){core_ParseIPRange=v}],["ParseIPv4Header",["core_ParseIPv4Header"],function(v){core_ParseIPv4Header=v}],["ParseIPv6Address",["core_ParseIPv6Address"],function(v){core_ParseIPv6Address=v}],["ParseObjectIDTimestamp",["core_ParseObjectIDTimestamp"],function(v){core_ParseObjectIDTimestamp=v}],["ParseQRCode",["core_ParseQRCode"],function(v){core_ParseQRCode=v}],["ParseSSHHostKey",["core_ParseSSHHostKey"],function(v){core_ParseSSHHostKey=v}],["ParseTLV",["core_ParseTLV"],function(v){core_ParseTLV=v}],["ParseUDP",["core_ParseUDP"],function(v){core_ParseUDP=v}],["ParseUNIXFilePermissions",["core_ParseUNIXFilePermissions"],function(v){core_ParseUNIXFilePermissions=v}],["ParseURI",["core_ParseURI"],function(v){core_ParseURI=v}],["ParseUserAgent",["core_ParseUserAgent"],function(v){core_ParseUserAgent=v}],["ParseX509Certificate",["core_ParseX509Certificate"],function(v){core_ParseX509Certificate=v}],["PlayMedia",["core_PlayMedia"],function(v){core_PlayMedia=v}],["PowerSet",["core_PowerSet"],function(v){core_PowerSet=v}],["ProtobufDecode",["core_ProtobufDecode"],function(v){core_ProtobufDecode=v}],["ProtobufEncode",["core_ProtobufEncode"],function(v){core_ProtobufEncode=v}],["PseudoRandomNumberGenerator",["core_PseudoRandomNumberGenerator"],function(v){core_PseudoRandomNumberGenerator=v}],["RC2Decrypt",["core_RC2Decrypt"],function(v){core_RC2Decrypt=v}],["RC2Encrypt",["core_RC2Encrypt"],function(v){core_RC2Encrypt=v}],["RC4",["core_RC4"],function(v){core_RC4=v}],["RC4Drop",["core_RC4Drop"],function(v){core_RC4Drop=v}],["RIPEMD",["core_RIPEMD"],function(v){core_RIPEMD=v}],["ROT13",["core_ROT13"],function(v){core_ROT13=v}],["ROT47",["core_ROT47"],function(v){core_ROT47=v}],["RSADecrypt",["core_RSADecrypt"],function(v){core_RSADecrypt=v}],["RSAEncrypt",["core_RSAEncrypt"],function(v){core_RSAEncrypt=v}],["RSASign",["core_RSASign"],function(v){core_RSASign=v}],["RSAVerify",["core_RSAVerify"],function(v){core_RSAVerify=v}],["RailFenceCipherDecode",["core_RailFenceCipherDecode"],function(v){core_RailFenceCipherDecode=v}],["RailFenceCipherEncode",["core_RailFenceCipherEncode"],function(v){core_RailFenceCipherEncode=v}],["RandomizeColourPalette",["core_RandomizeColourPalette"],function(v){core_RandomizeColourPalette=v}],["RawDeflate",["core_RawDeflate"],function(v){core_RawDeflate=v}],["RawInflate",["core_RawInflate"],function(v){core_RawInflate=v}],["Register",["core_Register"],function(v){core_Register=v}],["RegularExpression",["core_RegularExpression"],function(v){core_RegularExpression=v}],["RemoveDiacritics",["core_RemoveDiacritics"],function(v){core_RemoveDiacritics=v}],["RemoveEXIF",["core_RemoveEXIF"],function(v){core_RemoveEXIF=v}],["RemoveLineNumbers",["core_RemoveLineNumbers"],function(v){core_RemoveLineNumbers=v}],["RemoveNullBytes",["core_RemoveNullBytes"],function(v){core_RemoveNullBytes=v}],["RemoveWhitespace",["core_RemoveWhitespace"],function(v){core_RemoveWhitespace=v}],["RenderImage",["core_RenderImage"],function(v){core_RenderImage=v}],["RenderMarkdown",["core_RenderMarkdown"],function(v){core_RenderMarkdown=v}],["ResizeImage",["core_ResizeImage"],function(v){core_ResizeImage=v}],["Return",["core_Return"],function(v){core_Return=v}],["Reverse",["core_Reverse"],function(v){core_Reverse=v}],["RotateImage",["core_RotateImage"],function(v){core_RotateImage=v}],["RotateLeft",["core_RotateLeft"],function(v){core_RotateLeft=v}],["RotateRight",["core_RotateRight"],function(v){core_RotateRight=v}],["SHA0",["core_SHA0"],function(v){core_SHA0=v}],["SHA1",["core_SHA1"],function(v){core_SHA1=v}],["SHA2",["core_SHA2"],function(v){core_SHA2=v}],["SHA3",["core_SHA3"],function(v){core_SHA3=v}],["SM3",["core_SM3"],function(v){core_SM3=v}],["SQLBeautify",["core_SQLBeautify"],function(v){core_SQLBeautify=v}],["SQLMinify",["core_SQLMinify"],function(v){core_SQLMinify=v}],["SSDEEP",["core_SSDEEP"],function(v){core_SSDEEP=v}],["SUB",["core_SUB"],function(v){core_SUB=v}],["ScanForEmbeddedFiles",["core_ScanForEmbeddedFiles"],function(v){core_ScanForEmbeddedFiles=v}],["ScatterChart",["core_ScatterChart"],function(v){core_ScatterChart=v}],["Scrypt",["core_Scrypt"],function(v){core_Scrypt=v}],["SeriesChart",["core_SeriesChart"],function(v){core_SeriesChart=v}],["SetDifference",["core_SetDifference"],function(v){core_SetDifference=v}],["SetIntersection",["core_SetIntersection"],function(v){core_SetIntersection=v}],["SetUnion",["core_SetUnion"],function(v){core_SetUnion=v}],["Shake",["core_Shake"],function(v){core_Shake=v}],["SharpenImage",["core_SharpenImage"],function(v){core_SharpenImage=v}],["ShowBase64Offsets",["core_ShowBase64Offsets"],function(v){core_ShowBase64Offsets=v}],["ShowOnMap",["core_ShowOnMap"],function(v){core_ShowOnMap=v}],["Sleep",["core_Sleep"],function(v){core_Sleep=v}],["Snefru",["core_Snefru"],function(v){core_Snefru=v}],["Sort",["core_Sort"],function(v){core_Sort=v}],["Split",["core_Split"],function(v){core_Split=v}],["SplitColourChannels",["core_SplitColourChannels"],function(v){core_SplitColourChannels=v}],["StandardDeviation",["core_StandardDeviation"],function(v){core_StandardDeviation=v}],["Streebog",["core_Streebog"],function(v){core_Streebog=v}],["Strings",["core_Strings"],function(v){core_Strings=v}],["StripHTMLTags",["core_StripHTMLTags"],function(v){core_StripHTMLTags=v}],["StripHTTPHeaders",["core_StripHTTPHeaders"],function(v){core_StripHTTPHeaders=v}],["Subsection",["core_Subsection"],function(v){core_Subsection=v}],["Substitute",["core_Substitute"],function(v){core_Substitute=v}],["Subtract",["core_Subtract"],function(v){core_Subtract=v}],["Sum",["core_Sum"],function(v){core_Sum=v}],["SwapEndianness",["core_SwapEndianness"],function(v){core_SwapEndianness=v}],["SymmetricDifference",["core_SymmetricDifference"],function(v){core_SymmetricDifference=v}],["TCPIPChecksum",["core_TCPIPChecksum"],function(v){core_TCPIPChecksum=v}],["Tail",["core_Tail"],function(v){core_Tail=v}],["TakeBytes",["core_TakeBytes"],function(v){core_TakeBytes=v}],["Tar",["core_Tar"],function(v){core_Tar=v}],["TextEncodingBruteForce",["core_TextEncodingBruteForce"],function(v){core_TextEncodingBruteForce=v}],["ToBCD",["core_ToBCD"],function(v){core_ToBCD=v}],["ToBase",["core_ToBase"],function(v){core_ToBase=v}],["ToBase32",["core_ToBase32"],function(v){core_ToBase32=v}],["ToBase58",["core_ToBase58"],function(v){core_ToBase58=v}],["ToBase62",["core_ToBase62"],function(v){core_ToBase62=v}],["ToBase64",["core_ToBase64"],function(v){core_ToBase64=v}],["ToBase85",["core_ToBase85"],function(v){core_ToBase85=v}],["ToBinary",["core_ToBinary"],function(v){core_ToBinary=v}],["ToBraille",["core_ToBraille"],function(v){core_ToBraille=v}],["ToCamelCase",["core_ToCamelCase"],function(v){core_ToCamelCase=v}],["ToCaseInsensitiveRegex",["core_ToCaseInsensitiveRegex"],function(v){core_ToCaseInsensitiveRegex=v}],["ToCharcode",["core_ToCharcode"],function(v){core_ToCharcode=v}],["ToDecimal",["core_ToDecimal"],function(v){core_ToDecimal=v}],["ToHTMLEntity",["core_ToHTMLEntity"],function(v){core_ToHTMLEntity=v}],["ToHex",["core_ToHex"],function(v){core_ToHex=v}],["ToHexContent",["core_ToHexContent"],function(v){core_ToHexContent=v}],["ToHexdump",["core_ToHexdump"],function(v){core_ToHexdump=v}],["ToKebabCase",["core_ToKebabCase"],function(v){core_ToKebabCase=v}],["ToLowerCase",["core_ToLowerCase"],function(v){core_ToLowerCase=v}],["ToMessagePack",["core_ToMessagePack"],function(v){core_ToMessagePack=v}],["ToMorseCode",["core_ToMorseCode"],function(v){core_ToMorseCode=v}],["ToOctal",["core_ToOctal"],function(v){core_ToOctal=v}],["ToPunycode",["core_ToPunycode"],function(v){core_ToPunycode=v}],["ToQuotedPrintable",["core_ToQuotedPrintable"],function(v){core_ToQuotedPrintable=v}],["ToSnakeCase",["core_ToSnakeCase"],function(v){core_ToSnakeCase=v}],["ToTable",["core_ToTable"],function(v){core_ToTable=v}],["ToUNIXTimestamp",["core_ToUNIXTimestamp"],function(v){core_ToUNIXTimestamp=v}],["ToUpperCase",["core_ToUpperCase"],function(v){core_ToUpperCase=v}],["TranslateDateTimeFormat",["core_TranslateDateTimeFormat"],function(v){core_TranslateDateTimeFormat=v}],["TripleDESDecrypt",["core_TripleDESDecrypt"],function(v){core_TripleDESDecrypt=v}],["TripleDESEncrypt",["core_TripleDESEncrypt"],function(v){core_TripleDESEncrypt=v}],["Typex",["core_Typex"],function(v){core_Typex=v}],["UNIXTimestampToWindowsFiletime",["core_UNIXTimestampToWindowsFiletime"],function(v){core_UNIXTimestampToWindowsFiletime=v}],["URLDecode",["core_URLDecode"],function(v){core_URLDecode=v}],["URLEncode",["core_URLEncode"],function(v){core_URLEncode=v}],["UnescapeString",["core_UnescapeString"],function(v){core_UnescapeString=v}],["UnescapeUnicodeCharacters",["core_UnescapeUnicodeCharacters"],function(v){core_UnescapeUnicodeCharacters=v}],["UnicodeTextFormat",["core_UnicodeTextFormat"],function(v){core_UnicodeTextFormat=v}],["Unique",["core_Unique"],function(v){core_Unique=v}],["Untar",["core_Untar"],function(v){core_Untar=v}],["Unzip",["core_Unzip"],function(v){core_Unzip=v}],["VarIntDecode",["core_VarIntDecode"],function(v){core_VarIntDecode=v}],["VarIntEncode",["core_VarIntEncode"],function(v){core_VarIntEncode=v}],["ViewBitPlane",["core_ViewBitPlane"],function(v){core_ViewBitPlane=v}],["VigenèreDecode",["core_VigenèreDecode"],function(v){core_VigenèreDecode=v}],["VigenèreEncode",["core_VigenèreEncode"],function(v){core_VigenèreEncode=v}],["Whirlpool",["core_Whirlpool"],function(v){core_Whirlpool=v}],["WindowsFiletimeToUNIXTimestamp",["core_WindowsFiletimeToUNIXTimestamp"],function(v){core_WindowsFiletimeToUNIXTimestamp=v}],["XKCDRandomNumber",["core_XKCDRandomNumber"],function(v){core_XKCDRandomNumber=v}],["XMLBeautify",["core_XMLBeautify"],function(v){core_XMLBeautify=v}],["XMLMinify",["core_XMLMinify"],function(v){core_XMLMinify=v}],["XOR",["core_XOR"],function(v){core_XOR=v}],["XORBruteForce",["core_XORBruteForce"],function(v){core_XORBruteForce=v}],["XPathExpression",["core_XPathExpression"],function(v){core_XPathExpression=v}],["YARARules",["core_YARARules"],function(v){core_YARARules=v}],["Zip",["core_Zip"],function(v){core_Zip=v}],["ZlibDeflate",["core_ZlibDeflate"],function(v){core_ZlibDeflate=v}],["ZlibInflate",["core_ZlibInflate"],function(v){core_ZlibInflate=v}]]);/**
* THIS FILE IS AUTOMATICALLY GENERATED BY src/node/config/scripts/generateNodeIndex.mjs
*
* @author d98762625 [d98762625@gmail.com]
* @copyright Crown Copyright 2019
* @license Apache-2.0
*/

/* eslint camelcase: 0 */













































































































































































































































































































































































global.File = _52d‍.a("File",File);

/**
 * generateChef
 *
 * Creates decapitalised, wrapped ops in chef object for default export.
 */
function generateChef() {
    return {
        "A1Z26CipherDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_A1Z26CipherDecode",core_A1Z26CipherDecode)),
        "A1Z26CipherEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_A1Z26CipherEncode",core_A1Z26CipherEncode)),
        "ADD": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ADD",core_ADD)),
        "AESDecrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AESDecrypt",core_AESDecrypt)),
        "AESEncrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AESEncrypt",core_AESEncrypt)),
        "AND": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AND",core_AND)),
        "addLineNumbers": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AddLineNumbers",core_AddLineNumbers)),
        "addTextToImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AddTextToImage",core_AddTextToImage)),
        "adler32Checksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Adler32Checksum",core_Adler32Checksum)),
        "affineCipherDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AffineCipherDecode",core_AffineCipherDecode)),
        "affineCipherEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AffineCipherEncode",core_AffineCipherEncode)),
        "analyseHash": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AnalyseHash",core_AnalyseHash)),
        "atbashCipher": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AtbashCipher",core_AtbashCipher)),
        "avroToJSON": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_AvroToJSON",core_AvroToJSON)),
        "BLAKE2b": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BLAKE2b",core_BLAKE2b)),
        "BLAKE2s": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BLAKE2s",core_BLAKE2s)),
        "BSONDeserialise": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BSONDeserialise",core_BSONDeserialise)),
        "BSONSerialise": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BSONSerialise",core_BSONSerialise)),
        "baconCipherDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BaconCipherDecode",core_BaconCipherDecode)),
        "baconCipherEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BaconCipherEncode",core_BaconCipherEncode)),
        "bcrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Bcrypt",core_Bcrypt)),
        "bcryptCompare": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BcryptCompare",core_BcryptCompare)),
        "bcryptParse": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BcryptParse",core_BcryptParse)),
        "bifidCipherDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BifidCipherDecode",core_BifidCipherDecode)),
        "bifidCipherEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BifidCipherEncode",core_BifidCipherEncode)),
        "bitShiftLeft": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BitShiftLeft",core_BitShiftLeft)),
        "bitShiftRight": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BitShiftRight",core_BitShiftRight)),
        "blowfishDecrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BlowfishDecrypt",core_BlowfishDecrypt)),
        "blowfishEncrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BlowfishEncrypt",core_BlowfishEncrypt)),
        "blurImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_BlurImage",core_BlurImage)),
        "bombe": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Bombe",core_Bombe)),
        "bzip2Compress": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Bzip2Compress",core_Bzip2Compress)),
        "bzip2Decompress": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Bzip2Decompress",core_Bzip2Decompress)),
        "CBORDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CBORDecode",core_CBORDecode)),
        "CBOREncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CBOREncode",core_CBOREncode)),
        "CRC16Checksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CRC16Checksum",core_CRC16Checksum)),
        "CRC32Checksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CRC32Checksum",core_CRC32Checksum)),
        "CRC8Checksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CRC8Checksum",core_CRC8Checksum)),
        "CSSBeautify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CSSBeautify",core_CSSBeautify)),
        "CSSMinify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CSSMinify",core_CSSMinify)),
        "CSSSelector": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CSSSelector",core_CSSSelector)),
        "CSVToJSON": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CSVToJSON",core_CSVToJSON)),
        "CTPH": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CTPH",core_CTPH)),
        "cartesianProduct": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CartesianProduct",core_CartesianProduct)),
        "changeIPFormat": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ChangeIPFormat",core_ChangeIPFormat)),
        "chiSquare": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ChiSquare",core_ChiSquare)),
        "cipherSaber2Decrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CipherSaber2Decrypt",core_CipherSaber2Decrypt)),
        "cipherSaber2Encrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CipherSaber2Encrypt",core_CipherSaber2Encrypt)),
        "citrixCTX1Decode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CitrixCTX1Decode",core_CitrixCTX1Decode)),
        "citrixCTX1Encode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CitrixCTX1Encode",core_CitrixCTX1Encode)),
        "colossus": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Colossus",core_Colossus)),
        "compareCTPHHashes": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CompareCTPHHashes",core_CompareCTPHHashes)),
        "compareSSDEEPHashes": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CompareSSDEEPHashes",core_CompareSSDEEPHashes)),
        "containImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ContainImage",core_ContainImage)),
        "convertArea": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ConvertArea",core_ConvertArea)),
        "convertCoordinateFormat": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ConvertCoordinateFormat",core_ConvertCoordinateFormat)),
        "convertDataUnits": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ConvertDataUnits",core_ConvertDataUnits)),
        "convertDistance": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ConvertDistance",core_ConvertDistance)),
        "convertImageFormat": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ConvertImageFormat",core_ConvertImageFormat)),
        "convertMass": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ConvertMass",core_ConvertMass)),
        "convertSpeed": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ConvertSpeed",core_ConvertSpeed)),
        "convertToNATOAlphabet": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ConvertToNATOAlphabet",core_ConvertToNATOAlphabet)),
        "countOccurrences": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CountOccurrences",core_CountOccurrences)),
        "coverImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CoverImage",core_CoverImage)),
        "cropImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_CropImage",core_CropImage)),
        "DESDecrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DESDecrypt",core_DESDecrypt)),
        "DESEncrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DESEncrypt",core_DESEncrypt)),
        "DNSOverHTTPS": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DNSOverHTTPS",core_DNSOverHTTPS)),
        "dechunkHTTPResponse": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DechunkHTTPResponse",core_DechunkHTTPResponse)),
        "decodeNetBIOSName": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DecodeNetBIOSName",core_DecodeNetBIOSName)),
        "decodeText": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DecodeText",core_DecodeText)),
        "defangIPAddresses": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DefangIPAddresses",core_DefangIPAddresses)),
        "defangURL": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DefangURL",core_DefangURL)),
        "deriveEVPKey": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DeriveEVPKey",core_DeriveEVPKey)),
        "derivePBKDF2Key": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DerivePBKDF2Key",core_DerivePBKDF2Key)),
        "detectFileType": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DetectFileType",core_DetectFileType)),
        "diff": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Diff",core_Diff)),
        "disassembleX86": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DisassembleX86",core_DisassembleX86)),
        "ditherImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DitherImage",core_DitherImage)),
        "divide": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Divide",core_Divide)),
        "dropBytes": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_DropBytes",core_DropBytes)),
        "encodeNetBIOSName": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_EncodeNetBIOSName",core_EncodeNetBIOSName)),
        "encodeText": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_EncodeText",core_EncodeText)),
        "enigma": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Enigma",core_Enigma)),
        "entropy": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Entropy",core_Entropy)),
        "escapeString": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_EscapeString",core_EscapeString)),
        "escapeUnicodeCharacters": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_EscapeUnicodeCharacters",core_EscapeUnicodeCharacters)),
        "expandAlphabetRange": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExpandAlphabetRange",core_ExpandAlphabetRange)),
        "extractDates": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractDates",core_ExtractDates)),
        "extractDomains": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractDomains",core_ExtractDomains)),
        "extractEXIF": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractEXIF",core_ExtractEXIF)),
        "extractEmailAddresses": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractEmailAddresses",core_ExtractEmailAddresses)),
        "extractFilePaths": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractFilePaths",core_ExtractFilePaths)),
        "extractFiles": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractFiles",core_ExtractFiles)),
        "extractID3": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractID3",core_ExtractID3)),
        "extractIPAddresses": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractIPAddresses",core_ExtractIPAddresses)),
        "extractLSB": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractLSB",core_ExtractLSB)),
        "extractMACAddresses": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractMACAddresses",core_ExtractMACAddresses)),
        "extractRGBA": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractRGBA",core_ExtractRGBA)),
        "extractURLs": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ExtractURLs",core_ExtractURLs)),
        "filter": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Filter",core_Filter)),
        "findReplace": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FindReplace",core_FindReplace)),
        "fletcher16Checksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Fletcher16Checksum",core_Fletcher16Checksum)),
        "fletcher32Checksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Fletcher32Checksum",core_Fletcher32Checksum)),
        "fletcher64Checksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Fletcher64Checksum",core_Fletcher64Checksum)),
        "fletcher8Checksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Fletcher8Checksum",core_Fletcher8Checksum)),
        "flipImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FlipImage",core_FlipImage)),
        "formatMACAddresses": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FormatMACAddresses",core_FormatMACAddresses)),
        "frequencyDistribution": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FrequencyDistribution",core_FrequencyDistribution)),
        "fromBCD": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBCD",core_FromBCD)),
        "fromBase": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBase",core_FromBase)),
        "fromBase32": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBase32",core_FromBase32)),
        "fromBase58": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBase58",core_FromBase58)),
        "fromBase62": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBase62",core_FromBase62)),
        "fromBase64": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBase64",core_FromBase64)),
        "fromBase85": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBase85",core_FromBase85)),
        "fromBinary": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBinary",core_FromBinary)),
        "fromBraille": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromBraille",core_FromBraille)),
        "fromCaseInsensitiveRegex": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromCaseInsensitiveRegex",core_FromCaseInsensitiveRegex)),
        "fromCharcode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromCharcode",core_FromCharcode)),
        "fromDecimal": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromDecimal",core_FromDecimal)),
        "fromHTMLEntity": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromHTMLEntity",core_FromHTMLEntity)),
        "fromHex": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromHex",core_FromHex)),
        "fromHexContent": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromHexContent",core_FromHexContent)),
        "fromHexdump": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromHexdump",core_FromHexdump)),
        "fromMessagePack": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromMessagePack",core_FromMessagePack)),
        "fromMorseCode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromMorseCode",core_FromMorseCode)),
        "fromOctal": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromOctal",core_FromOctal)),
        "fromPunycode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromPunycode",core_FromPunycode)),
        "fromQuotedPrintable": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromQuotedPrintable",core_FromQuotedPrintable)),
        "fromUNIXTimestamp": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FromUNIXTimestamp",core_FromUNIXTimestamp)),
        "fuzzyMatch": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_FuzzyMatch",core_FuzzyMatch)),
        "GOSTHash": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GOSTHash",core_GOSTHash)),
        "generateAllHashes": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenerateAllHashes",core_GenerateAllHashes)),
        "generateHOTP": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenerateHOTP",core_GenerateHOTP)),
        "generateImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenerateImage",core_GenerateImage)),
        "generateLoremIpsum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenerateLoremIpsum",core_GenerateLoremIpsum)),
        "generatePGPKeyPair": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GeneratePGPKeyPair",core_GeneratePGPKeyPair)),
        "generateQRCode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenerateQRCode",core_GenerateQRCode)),
        "generateRSAKeyPair": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenerateRSAKeyPair",core_GenerateRSAKeyPair)),
        "generateTOTP": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenerateTOTP",core_GenerateTOTP)),
        "generateUUID": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenerateUUID",core_GenerateUUID)),
        "genericCodeBeautify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GenericCodeBeautify",core_GenericCodeBeautify)),
        "getTime": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GetTime",core_GetTime)),
        "groupIPAddresses": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_GroupIPAddresses",core_GroupIPAddresses)),
        "gunzip": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Gunzip",core_Gunzip)),
        "gzip": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Gzip",core_Gzip)),
        "HAS160": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HAS160",core_HAS160)),
        "HASSHClientFingerprint": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HASSHClientFingerprint",core_HASSHClientFingerprint)),
        "HASSHServerFingerprint": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HASSHServerFingerprint",core_HASSHServerFingerprint)),
        "HMAC": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HMAC",core_HMAC)),
        "HTMLToText": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HTMLToText",core_HTMLToText)),
        "HTTPRequest": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HTTPRequest",core_HTTPRequest)),
        "hammingDistance": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HammingDistance",core_HammingDistance)),
        "haversineDistance": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HaversineDistance",core_HaversineDistance)),
        "head": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Head",core_Head)),
        "heatmapChart": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HeatmapChart",core_HeatmapChart)),
        "hexDensityChart": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HexDensityChart",core_HexDensityChart)),
        "hexToObjectIdentifier": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HexToObjectIdentifier",core_HexToObjectIdentifier)),
        "hexToPEM": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_HexToPEM",core_HexToPEM)),
        "imageBrightnessContrast": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ImageBrightnessContrast",core_ImageBrightnessContrast)),
        "imageFilter": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ImageFilter",core_ImageFilter)),
        "imageHueSaturationLightness": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ImageHueSaturationLightness",core_ImageHueSaturationLightness)),
        "imageOpacity": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ImageOpacity",core_ImageOpacity)),
        "indexOfCoincidence": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_IndexOfCoincidence",core_IndexOfCoincidence)),
        "invertImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_InvertImage",core_InvertImage)),
        "JA3Fingerprint": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JA3Fingerprint",core_JA3Fingerprint)),
        "JA3SFingerprint": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JA3SFingerprint",core_JA3SFingerprint)),
        "JPathExpression": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JPathExpression",core_JPathExpression)),
        "JSONBeautify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JSONBeautify",core_JSONBeautify)),
        "JSONMinify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JSONMinify",core_JSONMinify)),
        "JSONToCSV": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JSONToCSV",core_JSONToCSV)),
        "JWTDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JWTDecode",core_JWTDecode)),
        "JWTSign": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JWTSign",core_JWTSign)),
        "JWTVerify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_JWTVerify",core_JWTVerify)),
        "keccak": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Keccak",core_Keccak)),
        "lorenz": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Lorenz",core_Lorenz)),
        "luhnChecksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_LuhnChecksum",core_LuhnChecksum)),
        "MD2": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_MD2",core_MD2)),
        "MD4": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_MD4",core_MD4)),
        "MD5": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_MD5",core_MD5)),
        "MD6": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_MD6",core_MD6)),
        "magic": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Magic",core_Magic)),
        "mean": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Mean",core_Mean)),
        "median": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Median",core_Median)),
        "microsoftScriptDecoder": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_MicrosoftScriptDecoder",core_MicrosoftScriptDecoder)),
        "multipleBombe": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_MultipleBombe",core_MultipleBombe)),
        "multiply": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Multiply",core_Multiply)),
        "NOT": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_NOT",core_NOT)),
        "normaliseImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_NormaliseImage",core_NormaliseImage)),
        "normaliseUnicode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_NormaliseUnicode",core_NormaliseUnicode)),
        "numberwang": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Numberwang",core_Numberwang)),
        "OR": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_OR",core_OR)),
        "objectIdentifierToHex": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ObjectIdentifierToHex",core_ObjectIdentifierToHex)),
        "offsetChecker": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_OffsetChecker",core_OffsetChecker)),
        "opticalCharacterRecognition": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_OpticalCharacterRecognition",core_OpticalCharacterRecognition)),
        "PEMToHex": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PEMToHex",core_PEMToHex)),
        "PGPDecrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PGPDecrypt",core_PGPDecrypt)),
        "PGPDecryptAndVerify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PGPDecryptAndVerify",core_PGPDecryptAndVerify)),
        "PGPEncrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PGPEncrypt",core_PGPEncrypt)),
        "PGPEncryptAndSign": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PGPEncryptAndSign",core_PGPEncryptAndSign)),
        "PGPVerify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PGPVerify",core_PGPVerify)),
        "PHPDeserialize": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PHPDeserialize",core_PHPDeserialize)),
        "padLines": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PadLines",core_PadLines)),
        "parseASN1HexString": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseASN1HexString",core_ParseASN1HexString)),
        "parseColourCode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseColourCode",core_ParseColourCode)),
        "parseDateTime": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseDateTime",core_ParseDateTime)),
        "parseIPRange": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseIPRange",core_ParseIPRange)),
        "parseIPv4Header": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseIPv4Header",core_ParseIPv4Header)),
        "parseIPv6Address": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseIPv6Address",core_ParseIPv6Address)),
        "parseObjectIDTimestamp": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseObjectIDTimestamp",core_ParseObjectIDTimestamp)),
        "parseQRCode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseQRCode",core_ParseQRCode)),
        "parseSSHHostKey": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseSSHHostKey",core_ParseSSHHostKey)),
        "parseTLV": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseTLV",core_ParseTLV)),
        "parseUDP": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseUDP",core_ParseUDP)),
        "parseUNIXFilePermissions": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseUNIXFilePermissions",core_ParseUNIXFilePermissions)),
        "parseURI": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseURI",core_ParseURI)),
        "parseUserAgent": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseUserAgent",core_ParseUserAgent)),
        "parseX509Certificate": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ParseX509Certificate",core_ParseX509Certificate)),
        "playMedia": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PlayMedia",core_PlayMedia)),
        "powerSet": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PowerSet",core_PowerSet)),
        "protobufDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ProtobufDecode",core_ProtobufDecode)),
        "protobufEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ProtobufEncode",core_ProtobufEncode)),
        "pseudoRandomNumberGenerator": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_PseudoRandomNumberGenerator",core_PseudoRandomNumberGenerator)),
        "RC2Decrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RC2Decrypt",core_RC2Decrypt)),
        "RC2Encrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RC2Encrypt",core_RC2Encrypt)),
        "RC4": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RC4",core_RC4)),
        "RC4Drop": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RC4Drop",core_RC4Drop)),
        "RIPEMD": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RIPEMD",core_RIPEMD)),
        "ROT13": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ROT13",core_ROT13)),
        "ROT47": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ROT47",core_ROT47)),
        "RSADecrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RSADecrypt",core_RSADecrypt)),
        "RSAEncrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RSAEncrypt",core_RSAEncrypt)),
        "RSASign": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RSASign",core_RSASign)),
        "RSAVerify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RSAVerify",core_RSAVerify)),
        "railFenceCipherDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RailFenceCipherDecode",core_RailFenceCipherDecode)),
        "railFenceCipherEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RailFenceCipherEncode",core_RailFenceCipherEncode)),
        "randomizeColourPalette": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RandomizeColourPalette",core_RandomizeColourPalette)),
        "rawDeflate": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RawDeflate",core_RawDeflate)),
        "rawInflate": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RawInflate",core_RawInflate)),
        "register": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Register",core_Register)),
        "regularExpression": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RegularExpression",core_RegularExpression)),
        "removeDiacritics": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RemoveDiacritics",core_RemoveDiacritics)),
        "removeEXIF": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RemoveEXIF",core_RemoveEXIF)),
        "removeLineNumbers": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RemoveLineNumbers",core_RemoveLineNumbers)),
        "removeNullBytes": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RemoveNullBytes",core_RemoveNullBytes)),
        "removeWhitespace": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RemoveWhitespace",core_RemoveWhitespace)),
        "renderImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RenderImage",core_RenderImage)),
        "renderMarkdown": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RenderMarkdown",core_RenderMarkdown)),
        "resizeImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ResizeImage",core_ResizeImage)),
        "Return": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Return",core_Return)),
        "reverse": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Reverse",core_Reverse)),
        "rotateImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RotateImage",core_RotateImage)),
        "rotateLeft": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RotateLeft",core_RotateLeft)),
        "rotateRight": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_RotateRight",core_RotateRight)),
        "SHA0": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SHA0",core_SHA0)),
        "SHA1": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SHA1",core_SHA1)),
        "SHA2": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SHA2",core_SHA2)),
        "SHA3": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SHA3",core_SHA3)),
        "SM3": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SM3",core_SM3)),
        "SQLBeautify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SQLBeautify",core_SQLBeautify)),
        "SQLMinify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SQLMinify",core_SQLMinify)),
        "SSDEEP": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SSDEEP",core_SSDEEP)),
        "SUB": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SUB",core_SUB)),
        "scanForEmbeddedFiles": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ScanForEmbeddedFiles",core_ScanForEmbeddedFiles)),
        "scatterChart": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ScatterChart",core_ScatterChart)),
        "scrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Scrypt",core_Scrypt)),
        "seriesChart": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SeriesChart",core_SeriesChart)),
        "setDifference": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SetDifference",core_SetDifference)),
        "setIntersection": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SetIntersection",core_SetIntersection)),
        "setUnion": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SetUnion",core_SetUnion)),
        "shake": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Shake",core_Shake)),
        "sharpenImage": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SharpenImage",core_SharpenImage)),
        "showBase64Offsets": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ShowBase64Offsets",core_ShowBase64Offsets)),
        "showOnMap": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ShowOnMap",core_ShowOnMap)),
        "sleep": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Sleep",core_Sleep)),
        "snefru": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Snefru",core_Snefru)),
        "sort": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Sort",core_Sort)),
        "split": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Split",core_Split)),
        "splitColourChannels": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SplitColourChannels",core_SplitColourChannels)),
        "standardDeviation": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_StandardDeviation",core_StandardDeviation)),
        "streebog": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Streebog",core_Streebog)),
        "strings": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Strings",core_Strings)),
        "stripHTMLTags": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_StripHTMLTags",core_StripHTMLTags)),
        "stripHTTPHeaders": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_StripHTTPHeaders",core_StripHTTPHeaders)),
        "subsection": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Subsection",core_Subsection)),
        "substitute": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Substitute",core_Substitute)),
        "subtract": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Subtract",core_Subtract)),
        "sum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Sum",core_Sum)),
        "swapEndianness": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SwapEndianness",core_SwapEndianness)),
        "symmetricDifference": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_SymmetricDifference",core_SymmetricDifference)),
        "TCPIPChecksum": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_TCPIPChecksum",core_TCPIPChecksum)),
        "tail": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Tail",core_Tail)),
        "takeBytes": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_TakeBytes",core_TakeBytes)),
        "tar": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Tar",core_Tar)),
        "textEncodingBruteForce": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_TextEncodingBruteForce",core_TextEncodingBruteForce)),
        "toBCD": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBCD",core_ToBCD)),
        "toBase": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBase",core_ToBase)),
        "toBase32": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBase32",core_ToBase32)),
        "toBase58": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBase58",core_ToBase58)),
        "toBase62": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBase62",core_ToBase62)),
        "toBase64": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBase64",core_ToBase64)),
        "toBase85": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBase85",core_ToBase85)),
        "toBinary": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBinary",core_ToBinary)),
        "toBraille": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToBraille",core_ToBraille)),
        "toCamelCase": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToCamelCase",core_ToCamelCase)),
        "toCaseInsensitiveRegex": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToCaseInsensitiveRegex",core_ToCaseInsensitiveRegex)),
        "toCharcode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToCharcode",core_ToCharcode)),
        "toDecimal": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToDecimal",core_ToDecimal)),
        "toHTMLEntity": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToHTMLEntity",core_ToHTMLEntity)),
        "toHex": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToHex",core_ToHex)),
        "toHexContent": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToHexContent",core_ToHexContent)),
        "toHexdump": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToHexdump",core_ToHexdump)),
        "toKebabCase": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToKebabCase",core_ToKebabCase)),
        "toLowerCase": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToLowerCase",core_ToLowerCase)),
        "toMessagePack": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToMessagePack",core_ToMessagePack)),
        "toMorseCode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToMorseCode",core_ToMorseCode)),
        "toOctal": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToOctal",core_ToOctal)),
        "toPunycode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToPunycode",core_ToPunycode)),
        "toQuotedPrintable": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToQuotedPrintable",core_ToQuotedPrintable)),
        "toSnakeCase": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToSnakeCase",core_ToSnakeCase)),
        "toTable": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToTable",core_ToTable)),
        "toUNIXTimestamp": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToUNIXTimestamp",core_ToUNIXTimestamp)),
        "toUpperCase": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ToUpperCase",core_ToUpperCase)),
        "translateDateTimeFormat": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_TranslateDateTimeFormat",core_TranslateDateTimeFormat)),
        "tripleDESDecrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_TripleDESDecrypt",core_TripleDESDecrypt)),
        "tripleDESEncrypt": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_TripleDESEncrypt",core_TripleDESEncrypt)),
        "typex": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Typex",core_Typex)),
        "UNIXTimestampToWindowsFiletime": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_UNIXTimestampToWindowsFiletime",core_UNIXTimestampToWindowsFiletime)),
        "URLDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_URLDecode",core_URLDecode)),
        "URLEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_URLEncode",core_URLEncode)),
        "unescapeString": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_UnescapeString",core_UnescapeString)),
        "unescapeUnicodeCharacters": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_UnescapeUnicodeCharacters",core_UnescapeUnicodeCharacters)),
        "unicodeTextFormat": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_UnicodeTextFormat",core_UnicodeTextFormat)),
        "unique": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Unique",core_Unique)),
        "untar": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Untar",core_Untar)),
        "unzip": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Unzip",core_Unzip)),
        "varIntDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_VarIntDecode",core_VarIntDecode)),
        "varIntEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_VarIntEncode",core_VarIntEncode)),
        "viewBitPlane": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ViewBitPlane",core_ViewBitPlane)),
        "vigenèreDecode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_VigenèreDecode",core_VigenèreDecode)),
        "vigenèreEncode": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_VigenèreEncode",core_VigenèreEncode)),
        "whirlpool": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Whirlpool",core_Whirlpool)),
        "windowsFiletimeToUNIXTimestamp": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_WindowsFiletimeToUNIXTimestamp",core_WindowsFiletimeToUNIXTimestamp)),
        "XKCDRandomNumber": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_XKCDRandomNumber",core_XKCDRandomNumber)),
        "XMLBeautify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_XMLBeautify",core_XMLBeautify)),
        "XMLMinify": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_XMLMinify",core_XMLMinify)),
        "XOR": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_XOR",core_XOR)),
        "XORBruteForce": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_XORBruteForce",core_XORBruteForce)),
        "XPathExpression": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_XPathExpression",core_XPathExpression)),
        "YARARules": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_YARARules",core_YARARules)),
        "zip": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_Zip",core_Zip)),
        "zlibDeflate": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ZlibDeflate",core_ZlibDeflate)),
        "zlibInflate": _52d‍.a("_wrap",_wrap)(_52d‍.a("core_ZlibInflate",core_ZlibInflate)),
        "fork": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("Fork"),
        "merge": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("Merge"),
        "jump": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("Jump"),
        "conditionalJump": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("ConditionalJump"),
        "label": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("Label"),
        "comment": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("Comment"),
        "javaScriptBeautify": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("JavaScriptBeautify"),
        "javaScriptMinify": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("JavaScriptMinify"),
        "javaScriptParser": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("JavaScriptParser"),
        "syntaxHighlighter": _52d‍.a("_explainExcludedFunction",_explainExcludedFunction)("SyntaxHighlighter"),
    };
}

const chef = generateChef();
// Add some additional features to chef object.
chef.help = _52d‍.a("help",help);
chef.Dish = _52d‍.a("NodeDish",NodeDish);

// Define consts here so we can add to top-level export - wont allow
// export of chef property.
const A1Z26CipherDecode = chef.A1Z26CipherDecode;
const A1Z26CipherEncode = chef.A1Z26CipherEncode;
const ADD = chef.ADD;
const AESDecrypt = chef.AESDecrypt;
const AESEncrypt = chef.AESEncrypt;
const AND = chef.AND;
const addLineNumbers = chef.addLineNumbers;
const addTextToImage = chef.addTextToImage;
const adler32Checksum = chef.adler32Checksum;
const affineCipherDecode = chef.affineCipherDecode;
const affineCipherEncode = chef.affineCipherEncode;
const analyseHash = chef.analyseHash;
const atbashCipher = chef.atbashCipher;
const avroToJSON = chef.avroToJSON;
const BLAKE2b = chef.BLAKE2b;
const BLAKE2s = chef.BLAKE2s;
const BSONDeserialise = chef.BSONDeserialise;
const BSONSerialise = chef.BSONSerialise;
const baconCipherDecode = chef.baconCipherDecode;
const baconCipherEncode = chef.baconCipherEncode;
const bcrypt = chef.bcrypt;
const bcryptCompare = chef.bcryptCompare;
const bcryptParse = chef.bcryptParse;
const bifidCipherDecode = chef.bifidCipherDecode;
const bifidCipherEncode = chef.bifidCipherEncode;
const bitShiftLeft = chef.bitShiftLeft;
const bitShiftRight = chef.bitShiftRight;
const blowfishDecrypt = chef.blowfishDecrypt;
const blowfishEncrypt = chef.blowfishEncrypt;
const blurImage = chef.blurImage;
const bombe = chef.bombe;
const bzip2Compress = chef.bzip2Compress;
const bzip2Decompress = chef.bzip2Decompress;
const CBORDecode = chef.CBORDecode;
const CBOREncode = chef.CBOREncode;
const CRC16Checksum = chef.CRC16Checksum;
const CRC32Checksum = chef.CRC32Checksum;
const CRC8Checksum = chef.CRC8Checksum;
const CSSBeautify = chef.CSSBeautify;
const CSSMinify = chef.CSSMinify;
const CSSSelector = chef.CSSSelector;
const CSVToJSON = chef.CSVToJSON;
const CTPH = chef.CTPH;
const cartesianProduct = chef.cartesianProduct;
const changeIPFormat = chef.changeIPFormat;
const chiSquare = chef.chiSquare;
const cipherSaber2Decrypt = chef.cipherSaber2Decrypt;
const cipherSaber2Encrypt = chef.cipherSaber2Encrypt;
const citrixCTX1Decode = chef.citrixCTX1Decode;
const citrixCTX1Encode = chef.citrixCTX1Encode;
const colossus = chef.colossus;
const comment = chef.comment;
const compareCTPHHashes = chef.compareCTPHHashes;
const compareSSDEEPHashes = chef.compareSSDEEPHashes;
const conditionalJump = chef.conditionalJump;
const containImage = chef.containImage;
const convertArea = chef.convertArea;
const convertCoordinateFormat = chef.convertCoordinateFormat;
const convertDataUnits = chef.convertDataUnits;
const convertDistance = chef.convertDistance;
const convertImageFormat = chef.convertImageFormat;
const convertMass = chef.convertMass;
const convertSpeed = chef.convertSpeed;
const convertToNATOAlphabet = chef.convertToNATOAlphabet;
const countOccurrences = chef.countOccurrences;
const coverImage = chef.coverImage;
const cropImage = chef.cropImage;
const DESDecrypt = chef.DESDecrypt;
const DESEncrypt = chef.DESEncrypt;
const DNSOverHTTPS = chef.DNSOverHTTPS;
const dechunkHTTPResponse = chef.dechunkHTTPResponse;
const decodeNetBIOSName = chef.decodeNetBIOSName;
const decodeText = chef.decodeText;
const defangIPAddresses = chef.defangIPAddresses;
const defangURL = chef.defangURL;
const deriveEVPKey = chef.deriveEVPKey;
const derivePBKDF2Key = chef.derivePBKDF2Key;
const detectFileType = chef.detectFileType;
const diff = chef.diff;
const disassembleX86 = chef.disassembleX86;
const ditherImage = chef.ditherImage;
const divide = chef.divide;
const dropBytes = chef.dropBytes;
const encodeNetBIOSName = chef.encodeNetBIOSName;
const encodeText = chef.encodeText;
const enigma = chef.enigma;
const entropy = chef.entropy;
const escapeString = chef.escapeString;
const escapeUnicodeCharacters = chef.escapeUnicodeCharacters;
const expandAlphabetRange = chef.expandAlphabetRange;
const extractDates = chef.extractDates;
const extractDomains = chef.extractDomains;
const extractEXIF = chef.extractEXIF;
const extractEmailAddresses = chef.extractEmailAddresses;
const extractFilePaths = chef.extractFilePaths;
const extractFiles = chef.extractFiles;
const extractID3 = chef.extractID3;
const extractIPAddresses = chef.extractIPAddresses;
const extractLSB = chef.extractLSB;
const extractMACAddresses = chef.extractMACAddresses;
const extractRGBA = chef.extractRGBA;
const extractURLs = chef.extractURLs;
const filter = chef.filter;
const findReplace = chef.findReplace;
const fletcher16Checksum = chef.fletcher16Checksum;
const fletcher32Checksum = chef.fletcher32Checksum;
const fletcher64Checksum = chef.fletcher64Checksum;
const fletcher8Checksum = chef.fletcher8Checksum;
const flipImage = chef.flipImage;
const fork = chef.fork;
const formatMACAddresses = chef.formatMACAddresses;
const frequencyDistribution = chef.frequencyDistribution;
const fromBCD = chef.fromBCD;
const fromBase = chef.fromBase;
const fromBase32 = chef.fromBase32;
const fromBase58 = chef.fromBase58;
const fromBase62 = chef.fromBase62;
const fromBase64 = chef.fromBase64;
const fromBase85 = chef.fromBase85;
const fromBinary = chef.fromBinary;
const fromBraille = chef.fromBraille;
const fromCaseInsensitiveRegex = chef.fromCaseInsensitiveRegex;
const fromCharcode = chef.fromCharcode;
const fromDecimal = chef.fromDecimal;
const fromHTMLEntity = chef.fromHTMLEntity;
const fromHex = chef.fromHex;
const fromHexContent = chef.fromHexContent;
const fromHexdump = chef.fromHexdump;
const fromMessagePack = chef.fromMessagePack;
const fromMorseCode = chef.fromMorseCode;
const fromOctal = chef.fromOctal;
const fromPunycode = chef.fromPunycode;
const fromQuotedPrintable = chef.fromQuotedPrintable;
const fromUNIXTimestamp = chef.fromUNIXTimestamp;
const fuzzyMatch = chef.fuzzyMatch;
const GOSTHash = chef.GOSTHash;
const generateAllHashes = chef.generateAllHashes;
const generateHOTP = chef.generateHOTP;
const generateImage = chef.generateImage;
const generateLoremIpsum = chef.generateLoremIpsum;
const generatePGPKeyPair = chef.generatePGPKeyPair;
const generateQRCode = chef.generateQRCode;
const generateRSAKeyPair = chef.generateRSAKeyPair;
const generateTOTP = chef.generateTOTP;
const generateUUID = chef.generateUUID;
const genericCodeBeautify = chef.genericCodeBeautify;
const getTime = chef.getTime;
const groupIPAddresses = chef.groupIPAddresses;
const gunzip = chef.gunzip;
const gzip = chef.gzip;
const HAS160 = chef.HAS160;
const HASSHClientFingerprint = chef.HASSHClientFingerprint;
const HASSHServerFingerprint = chef.HASSHServerFingerprint;
const HMAC = chef.HMAC;
const HTMLToText = chef.HTMLToText;
const HTTPRequest = chef.HTTPRequest;
const hammingDistance = chef.hammingDistance;
const haversineDistance = chef.haversineDistance;
const head = chef.head;
const heatmapChart = chef.heatmapChart;
const hexDensityChart = chef.hexDensityChart;
const hexToObjectIdentifier = chef.hexToObjectIdentifier;
const hexToPEM = chef.hexToPEM;
const imageBrightnessContrast = chef.imageBrightnessContrast;
const imageFilter = chef.imageFilter;
const imageHueSaturationLightness = chef.imageHueSaturationLightness;
const imageOpacity = chef.imageOpacity;
const indexOfCoincidence = chef.indexOfCoincidence;
const invertImage = chef.invertImage;
const JA3Fingerprint = chef.JA3Fingerprint;
const JA3SFingerprint = chef.JA3SFingerprint;
const JPathExpression = chef.JPathExpression;
const JSONBeautify = chef.JSONBeautify;
const JSONMinify = chef.JSONMinify;
const JSONToCSV = chef.JSONToCSV;
const JWTDecode = chef.JWTDecode;
const JWTSign = chef.JWTSign;
const JWTVerify = chef.JWTVerify;
const javaScriptBeautify = chef.javaScriptBeautify;
const javaScriptMinify = chef.javaScriptMinify;
const javaScriptParser = chef.javaScriptParser;
const jump = chef.jump;
const keccak = chef.keccak;
const label = chef.label;
const lorenz = chef.lorenz;
const luhnChecksum = chef.luhnChecksum;
const MD2 = chef.MD2;
const MD4 = chef.MD4;
const MD5 = chef.MD5;
const MD6 = chef.MD6;
const magic = chef.magic;
const mean = chef.mean;
const median = chef.median;
const merge = chef.merge;
const microsoftScriptDecoder = chef.microsoftScriptDecoder;
const multipleBombe = chef.multipleBombe;
const multiply = chef.multiply;
const NOT = chef.NOT;
const normaliseImage = chef.normaliseImage;
const normaliseUnicode = chef.normaliseUnicode;
const numberwang = chef.numberwang;
const OR = chef.OR;
const objectIdentifierToHex = chef.objectIdentifierToHex;
const offsetChecker = chef.offsetChecker;
const opticalCharacterRecognition = chef.opticalCharacterRecognition;
const PEMToHex = chef.PEMToHex;
const PGPDecrypt = chef.PGPDecrypt;
const PGPDecryptAndVerify = chef.PGPDecryptAndVerify;
const PGPEncrypt = chef.PGPEncrypt;
const PGPEncryptAndSign = chef.PGPEncryptAndSign;
const PGPVerify = chef.PGPVerify;
const PHPDeserialize = chef.PHPDeserialize;
const padLines = chef.padLines;
const parseASN1HexString = chef.parseASN1HexString;
const parseColourCode = chef.parseColourCode;
const parseDateTime = chef.parseDateTime;
const parseIPRange = chef.parseIPRange;
const parseIPv4Header = chef.parseIPv4Header;
const parseIPv6Address = chef.parseIPv6Address;
const parseObjectIDTimestamp = chef.parseObjectIDTimestamp;
const parseQRCode = chef.parseQRCode;
const parseSSHHostKey = chef.parseSSHHostKey;
const parseTLV = chef.parseTLV;
const parseUDP = chef.parseUDP;
const parseUNIXFilePermissions = chef.parseUNIXFilePermissions;
const parseURI = chef.parseURI;
const parseUserAgent = chef.parseUserAgent;
const parseX509Certificate = chef.parseX509Certificate;
const playMedia = chef.playMedia;
const powerSet = chef.powerSet;
const protobufDecode = chef.protobufDecode;
const protobufEncode = chef.protobufEncode;
const pseudoRandomNumberGenerator = chef.pseudoRandomNumberGenerator;
const RC2Decrypt = chef.RC2Decrypt;
const RC2Encrypt = chef.RC2Encrypt;
const RC4 = chef.RC4;
const RC4Drop = chef.RC4Drop;
const RIPEMD = chef.RIPEMD;
const ROT13 = chef.ROT13;
const ROT47 = chef.ROT47;
const RSADecrypt = chef.RSADecrypt;
const RSAEncrypt = chef.RSAEncrypt;
const RSASign = chef.RSASign;
const RSAVerify = chef.RSAVerify;
const railFenceCipherDecode = chef.railFenceCipherDecode;
const railFenceCipherEncode = chef.railFenceCipherEncode;
const randomizeColourPalette = chef.randomizeColourPalette;
const rawDeflate = chef.rawDeflate;
const rawInflate = chef.rawInflate;
const register = chef.register;
const regularExpression = chef.regularExpression;
const removeDiacritics = chef.removeDiacritics;
const removeEXIF = chef.removeEXIF;
const removeLineNumbers = chef.removeLineNumbers;
const removeNullBytes = chef.removeNullBytes;
const removeWhitespace = chef.removeWhitespace;
const renderImage = chef.renderImage;
const renderMarkdown = chef.renderMarkdown;
const resizeImage = chef.resizeImage;
const Return = chef.Return;
const reverse = chef.reverse;
const rotateImage = chef.rotateImage;
const rotateLeft = chef.rotateLeft;
const rotateRight = chef.rotateRight;
const SHA0 = chef.SHA0;
const SHA1 = chef.SHA1;
const SHA2 = chef.SHA2;
const SHA3 = chef.SHA3;
const SM3 = chef.SM3;
const SQLBeautify = chef.SQLBeautify;
const SQLMinify = chef.SQLMinify;
const SSDEEP = chef.SSDEEP;
const SUB = chef.SUB;
const scanForEmbeddedFiles = chef.scanForEmbeddedFiles;
const scatterChart = chef.scatterChart;
const scrypt = chef.scrypt;
const seriesChart = chef.seriesChart;
const setDifference = chef.setDifference;
const setIntersection = chef.setIntersection;
const setUnion = chef.setUnion;
const shake = chef.shake;
const sharpenImage = chef.sharpenImage;
const showBase64Offsets = chef.showBase64Offsets;
const showOnMap = chef.showOnMap;
const sleep = chef.sleep;
const snefru = chef.snefru;
const sort = chef.sort;
const split = chef.split;
const splitColourChannels = chef.splitColourChannels;
const standardDeviation = chef.standardDeviation;
const streebog = chef.streebog;
const strings = chef.strings;
const stripHTMLTags = chef.stripHTMLTags;
const stripHTTPHeaders = chef.stripHTTPHeaders;
const subsection = chef.subsection;
const substitute = chef.substitute;
const subtract = chef.subtract;
const sum = chef.sum;
const swapEndianness = chef.swapEndianness;
const symmetricDifference = chef.symmetricDifference;
const syntaxHighlighter = chef.syntaxHighlighter;
const TCPIPChecksum = chef.TCPIPChecksum;
const tail = chef.tail;
const takeBytes = chef.takeBytes;
const tar = chef.tar;
const textEncodingBruteForce = chef.textEncodingBruteForce;
const toBCD = chef.toBCD;
const toBase = chef.toBase;
const toBase32 = chef.toBase32;
const toBase58 = chef.toBase58;
const toBase62 = chef.toBase62;
const toBase64 = chef.toBase64;
const toBase85 = chef.toBase85;
const toBinary = chef.toBinary;
const toBraille = chef.toBraille;
const toCamelCase = chef.toCamelCase;
const toCaseInsensitiveRegex = chef.toCaseInsensitiveRegex;
const toCharcode = chef.toCharcode;
const toDecimal = chef.toDecimal;
const toHTMLEntity = chef.toHTMLEntity;
const toHex = chef.toHex;
const toHexContent = chef.toHexContent;
const toHexdump = chef.toHexdump;
const toKebabCase = chef.toKebabCase;
const toLowerCase = chef.toLowerCase;
const toMessagePack = chef.toMessagePack;
const toMorseCode = chef.toMorseCode;
const toOctal = chef.toOctal;
const toPunycode = chef.toPunycode;
const toQuotedPrintable = chef.toQuotedPrintable;
const toSnakeCase = chef.toSnakeCase;
const toTable = chef.toTable;
const toUNIXTimestamp = chef.toUNIXTimestamp;
const toUpperCase = chef.toUpperCase;
const translateDateTimeFormat = chef.translateDateTimeFormat;
const tripleDESDecrypt = chef.tripleDESDecrypt;
const tripleDESEncrypt = chef.tripleDESEncrypt;
const typex = chef.typex;
const UNIXTimestampToWindowsFiletime = chef.UNIXTimestampToWindowsFiletime;
const URLDecode = chef.URLDecode;
const URLEncode = chef.URLEncode;
const unescapeString = chef.unescapeString;
const unescapeUnicodeCharacters = chef.unescapeUnicodeCharacters;
const unicodeTextFormat = chef.unicodeTextFormat;
const unique = chef.unique;
const untar = chef.untar;
const unzip = chef.unzip;
const varIntDecode = chef.varIntDecode;
const varIntEncode = chef.varIntEncode;
const viewBitPlane = chef.viewBitPlane;
const vigenèreDecode = chef.vigenèreDecode;
const vigenèreEncode = chef.vigenèreEncode;
const whirlpool = chef.whirlpool;
const windowsFiletimeToUNIXTimestamp = chef.windowsFiletimeToUNIXTimestamp;
const XKCDRandomNumber = chef.XKCDRandomNumber;
const XMLBeautify = chef.XMLBeautify;
const XMLMinify = chef.XMLMinify;
const XOR = chef.XOR;
const XORBruteForce = chef.XORBruteForce;
const XPathExpression = chef.XPathExpression;
const YARARules = chef.YARARules;
const zip = chef.zip;
const zlibDeflate = chef.zlibDeflate;
const zlibInflate = chef.zlibInflate;


// Define array of all operations to create register for bake.
const operations = [
    A1Z26CipherDecode,
    A1Z26CipherEncode,
    ADD,
    AESDecrypt,
    AESEncrypt,
    AND,
    addLineNumbers,
    addTextToImage,
    adler32Checksum,
    affineCipherDecode,
    affineCipherEncode,
    analyseHash,
    atbashCipher,
    avroToJSON,
    BLAKE2b,
    BLAKE2s,
    BSONDeserialise,
    BSONSerialise,
    baconCipherDecode,
    baconCipherEncode,
    bcrypt,
    bcryptCompare,
    bcryptParse,
    bifidCipherDecode,
    bifidCipherEncode,
    bitShiftLeft,
    bitShiftRight,
    blowfishDecrypt,
    blowfishEncrypt,
    blurImage,
    bombe,
    bzip2Compress,
    bzip2Decompress,
    CBORDecode,
    CBOREncode,
    CRC16Checksum,
    CRC32Checksum,
    CRC8Checksum,
    CSSBeautify,
    CSSMinify,
    CSSSelector,
    CSVToJSON,
    CTPH,
    cartesianProduct,
    changeIPFormat,
    chiSquare,
    cipherSaber2Decrypt,
    cipherSaber2Encrypt,
    citrixCTX1Decode,
    citrixCTX1Encode,
    colossus,
    comment,
    compareCTPHHashes,
    compareSSDEEPHashes,
    conditionalJump,
    containImage,
    convertArea,
    convertCoordinateFormat,
    convertDataUnits,
    convertDistance,
    convertImageFormat,
    convertMass,
    convertSpeed,
    convertToNATOAlphabet,
    countOccurrences,
    coverImage,
    cropImage,
    DESDecrypt,
    DESEncrypt,
    DNSOverHTTPS,
    dechunkHTTPResponse,
    decodeNetBIOSName,
    decodeText,
    defangIPAddresses,
    defangURL,
    deriveEVPKey,
    derivePBKDF2Key,
    detectFileType,
    diff,
    disassembleX86,
    ditherImage,
    divide,
    dropBytes,
    encodeNetBIOSName,
    encodeText,
    enigma,
    entropy,
    escapeString,
    escapeUnicodeCharacters,
    expandAlphabetRange,
    extractDates,
    extractDomains,
    extractEXIF,
    extractEmailAddresses,
    extractFilePaths,
    extractFiles,
    extractID3,
    extractIPAddresses,
    extractLSB,
    extractMACAddresses,
    extractRGBA,
    extractURLs,
    filter,
    findReplace,
    fletcher16Checksum,
    fletcher32Checksum,
    fletcher64Checksum,
    fletcher8Checksum,
    flipImage,
    fork,
    formatMACAddresses,
    frequencyDistribution,
    fromBCD,
    fromBase,
    fromBase32,
    fromBase58,
    fromBase62,
    fromBase64,
    fromBase85,
    fromBinary,
    fromBraille,
    fromCaseInsensitiveRegex,
    fromCharcode,
    fromDecimal,
    fromHTMLEntity,
    fromHex,
    fromHexContent,
    fromHexdump,
    fromMessagePack,
    fromMorseCode,
    fromOctal,
    fromPunycode,
    fromQuotedPrintable,
    fromUNIXTimestamp,
    fuzzyMatch,
    GOSTHash,
    generateAllHashes,
    generateHOTP,
    generateImage,
    generateLoremIpsum,
    generatePGPKeyPair,
    generateQRCode,
    generateRSAKeyPair,
    generateTOTP,
    generateUUID,
    genericCodeBeautify,
    getTime,
    groupIPAddresses,
    gunzip,
    gzip,
    HAS160,
    HASSHClientFingerprint,
    HASSHServerFingerprint,
    HMAC,
    HTMLToText,
    HTTPRequest,
    hammingDistance,
    haversineDistance,
    head,
    heatmapChart,
    hexDensityChart,
    hexToObjectIdentifier,
    hexToPEM,
    imageBrightnessContrast,
    imageFilter,
    imageHueSaturationLightness,
    imageOpacity,
    indexOfCoincidence,
    invertImage,
    JA3Fingerprint,
    JA3SFingerprint,
    JPathExpression,
    JSONBeautify,
    JSONMinify,
    JSONToCSV,
    JWTDecode,
    JWTSign,
    JWTVerify,
    javaScriptBeautify,
    javaScriptMinify,
    javaScriptParser,
    jump,
    keccak,
    label,
    lorenz,
    luhnChecksum,
    MD2,
    MD4,
    MD5,
    MD6,
    magic,
    mean,
    median,
    merge,
    microsoftScriptDecoder,
    multipleBombe,
    multiply,
    NOT,
    normaliseImage,
    normaliseUnicode,
    numberwang,
    OR,
    objectIdentifierToHex,
    offsetChecker,
    opticalCharacterRecognition,
    PEMToHex,
    PGPDecrypt,
    PGPDecryptAndVerify,
    PGPEncrypt,
    PGPEncryptAndSign,
    PGPVerify,
    PHPDeserialize,
    padLines,
    parseASN1HexString,
    parseColourCode,
    parseDateTime,
    parseIPRange,
    parseIPv4Header,
    parseIPv6Address,
    parseObjectIDTimestamp,
    parseQRCode,
    parseSSHHostKey,
    parseTLV,
    parseUDP,
    parseUNIXFilePermissions,
    parseURI,
    parseUserAgent,
    parseX509Certificate,
    playMedia,
    powerSet,
    protobufDecode,
    protobufEncode,
    pseudoRandomNumberGenerator,
    RC2Decrypt,
    RC2Encrypt,
    RC4,
    RC4Drop,
    RIPEMD,
    ROT13,
    ROT47,
    RSADecrypt,
    RSAEncrypt,
    RSASign,
    RSAVerify,
    railFenceCipherDecode,
    railFenceCipherEncode,
    randomizeColourPalette,
    rawDeflate,
    rawInflate,
    register,
    regularExpression,
    removeDiacritics,
    removeEXIF,
    removeLineNumbers,
    removeNullBytes,
    removeWhitespace,
    renderImage,
    renderMarkdown,
    resizeImage,
    Return,
    reverse,
    rotateImage,
    rotateLeft,
    rotateRight,
    SHA0,
    SHA1,
    SHA2,
    SHA3,
    SM3,
    SQLBeautify,
    SQLMinify,
    SSDEEP,
    SUB,
    scanForEmbeddedFiles,
    scatterChart,
    scrypt,
    seriesChart,
    setDifference,
    setIntersection,
    setUnion,
    shake,
    sharpenImage,
    showBase64Offsets,
    showOnMap,
    sleep,
    snefru,
    sort,
    split,
    splitColourChannels,
    standardDeviation,
    streebog,
    strings,
    stripHTMLTags,
    stripHTTPHeaders,
    subsection,
    substitute,
    subtract,
    sum,
    swapEndianness,
    symmetricDifference,
    syntaxHighlighter,
    TCPIPChecksum,
    tail,
    takeBytes,
    tar,
    textEncodingBruteForce,
    toBCD,
    toBase,
    toBase32,
    toBase58,
    toBase62,
    toBase64,
    toBase85,
    toBinary,
    toBraille,
    toCamelCase,
    toCaseInsensitiveRegex,
    toCharcode,
    toDecimal,
    toHTMLEntity,
    toHex,
    toHexContent,
    toHexdump,
    toKebabCase,
    toLowerCase,
    toMessagePack,
    toMorseCode,
    toOctal,
    toPunycode,
    toQuotedPrintable,
    toSnakeCase,
    toTable,
    toUNIXTimestamp,
    toUpperCase,
    translateDateTimeFormat,
    tripleDESDecrypt,
    tripleDESEncrypt,
    typex,
    UNIXTimestampToWindowsFiletime,
    URLDecode,
    URLEncode,
    unescapeString,
    unescapeUnicodeCharacters,
    unicodeTextFormat,
    unique,
    untar,
    unzip,
    varIntDecode,
    varIntEncode,
    viewBitPlane,
    vigenèreDecode,
    vigenèreEncode,
    whirlpool,
    windowsFiletimeToUNIXTimestamp,
    XKCDRandomNumber,
    XMLBeautify,
    XMLMinify,
    XOR,
    XORBruteForce,
    XPathExpression,
    YARARules,
    zip,
    zlibDeflate,
    zlibInflate,
];

chef.bake = _52d‍.a("bake",bake);
_52d‍.d(chef);_52d‍.j(["default"]);

// Operations as top level exports.




















































































































































































































































































































































































;_52d‍.j(["operations","A1Z26CipherDecode","A1Z26CipherEncode","ADD","AESDecrypt","AESEncrypt","AND","addLineNumbers","addTextToImage","adler32Checksum","affineCipherDecode","affineCipherEncode","analyseHash","atbashCipher","avroToJSON","BLAKE2b","BLAKE2s","BSONDeserialise","BSONSerialise","baconCipherDecode","baconCipherEncode","bcrypt","bcryptCompare","bcryptParse","bifidCipherDecode","bifidCipherEncode","bitShiftLeft","bitShiftRight","blowfishDecrypt","blowfishEncrypt","blurImage","bombe","bzip2Compress","bzip2Decompress","CBORDecode","CBOREncode","CRC16Checksum","CRC32Checksum","CRC8Checksum","CSSBeautify","CSSMinify","CSSSelector","CSVToJSON","CTPH","cartesianProduct","changeIPFormat","chiSquare","cipherSaber2Decrypt","cipherSaber2Encrypt","citrixCTX1Decode","citrixCTX1Encode","colossus","comment","compareCTPHHashes","compareSSDEEPHashes","conditionalJump","containImage","convertArea","convertCoordinateFormat","convertDataUnits","convertDistance","convertImageFormat","convertMass","convertSpeed","convertToNATOAlphabet","countOccurrences","coverImage","cropImage","DESDecrypt","DESEncrypt","DNSOverHTTPS","dechunkHTTPResponse","decodeNetBIOSName","decodeText","defangIPAddresses","defangURL","deriveEVPKey","derivePBKDF2Key","detectFileType","diff","disassembleX86","ditherImage","divide","dropBytes","encodeNetBIOSName","encodeText","enigma","entropy","escapeString","escapeUnicodeCharacters","expandAlphabetRange","extractDates","extractDomains","extractEXIF","extractEmailAddresses","extractFilePaths","extractFiles","extractID3","extractIPAddresses","extractLSB","extractMACAddresses","extractRGBA","extractURLs","filter","findReplace","fletcher16Checksum","fletcher32Checksum","fletcher64Checksum","fletcher8Checksum","flipImage","fork","formatMACAddresses","frequencyDistribution","fromBCD","fromBase","fromBase32","fromBase58","fromBase62","fromBase64","fromBase85","fromBinary","fromBraille","fromCaseInsensitiveRegex","fromCharcode","fromDecimal","fromHTMLEntity","fromHex","fromHexContent","fromHexdump","fromMessagePack","fromMorseCode","fromOctal","fromPunycode","fromQuotedPrintable","fromUNIXTimestamp","fuzzyMatch","GOSTHash","generateAllHashes","generateHOTP","generateImage","generateLoremIpsum","generatePGPKeyPair","generateQRCode","generateRSAKeyPair","generateTOTP","generateUUID","genericCodeBeautify","getTime","groupIPAddresses","gunzip","gzip","HAS160","HASSHClientFingerprint","HASSHServerFingerprint","HMAC","HTMLToText","HTTPRequest","hammingDistance","haversineDistance","head","heatmapChart","hexDensityChart","hexToObjectIdentifier","hexToPEM","imageBrightnessContrast","imageFilter","imageHueSaturationLightness","imageOpacity","indexOfCoincidence","invertImage","JA3Fingerprint","JA3SFingerprint","JPathExpression","JSONBeautify","JSONMinify","JSONToCSV","JWTDecode","JWTSign","JWTVerify","javaScriptBeautify","javaScriptMinify","javaScriptParser","jump","keccak","label","lorenz","luhnChecksum","MD2","MD4","MD5","MD6","magic","mean","median","merge","microsoftScriptDecoder","multipleBombe","multiply","NOT","normaliseImage","normaliseUnicode","numberwang","OR","objectIdentifierToHex","offsetChecker","opticalCharacterRecognition","PEMToHex","PGPDecrypt","PGPDecryptAndVerify","PGPEncrypt","PGPEncryptAndSign","PGPVerify","PHPDeserialize","padLines","parseASN1HexString","parseColourCode","parseDateTime","parseIPRange","parseIPv4Header","parseIPv6Address","parseObjectIDTimestamp","parseQRCode","parseSSHHostKey","parseTLV","parseUDP","parseUNIXFilePermissions","parseURI","parseUserAgent","parseX509Certificate","playMedia","powerSet","protobufDecode","protobufEncode","pseudoRandomNumberGenerator","RC2Decrypt","RC2Encrypt","RC4","RC4Drop","RIPEMD","ROT13","ROT47","RSADecrypt","RSAEncrypt","RSASign","RSAVerify","railFenceCipherDecode","railFenceCipherEncode","randomizeColourPalette","rawDeflate","rawInflate","register","regularExpression","removeDiacritics","removeEXIF","removeLineNumbers","removeNullBytes","removeWhitespace","renderImage","renderMarkdown","resizeImage","Return","reverse","rotateImage","rotateLeft","rotateRight","SHA0","SHA1","SHA2","SHA3","SM3","SQLBeautify","SQLMinify","SSDEEP","SUB","scanForEmbeddedFiles","scatterChart","scrypt","seriesChart","setDifference","setIntersection","setUnion","shake","sharpenImage","showBase64Offsets","showOnMap","sleep","snefru","sort","split","splitColourChannels","standardDeviation","streebog","strings","stripHTMLTags","stripHTTPHeaders","subsection","substitute","subtract","sum","swapEndianness","symmetricDifference","syntaxHighlighter","TCPIPChecksum","tail","takeBytes","tar","textEncodingBruteForce","toBCD","toBase","toBase32","toBase58","toBase62","toBase64","toBase85","toBinary","toBraille","toCamelCase","toCaseInsensitiveRegex","toCharcode","toDecimal","toHTMLEntity","toHex","toHexContent","toHexdump","toKebabCase","toLowerCase","toMessagePack","toMorseCode","toOctal","toPunycode","toQuotedPrintable","toSnakeCase","toTable","toUNIXTimestamp","toUpperCase","translateDateTimeFormat","tripleDESDecrypt","tripleDESEncrypt","typex","UNIXTimestampToWindowsFiletime","URLDecode","URLEncode","unescapeString","unescapeUnicodeCharacters","unicodeTextFormat","unique","untar","unzip","varIntDecode","varIntEncode","viewBitPlane","vigenèreDecode","vigenèreEncode","whirlpool","windowsFiletimeToUNIXTimestamp","XKCDRandomNumber","XMLBeautify","XMLMinify","XOR","XORBruteForce","XPathExpression","YARARules","zip","zlibDeflate","zlibInflate","Dish","bake","help","OperationError","ExcludedOperationError","DishError"]);
