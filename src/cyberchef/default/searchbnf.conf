[cyberchef-command]

maintainer 		= Noah Dietrich
shortdesc 		= Apply CyberChef operations and recipes to your data with a custom search command.

description 	= Process field values with CyberChef operations or recipes.  An operation is a single CyberChef function (like "toBase64") without any parameters.  A recipe is one or more operations, with optional parameters (parameters such as specifying the block size with the "SHA3" function).\p\\

Please see the About page in this App for more details and examples.\p\\
You must specify the "infield=" as the first option with this command, which tells CyberChef what field to apply the operation or recipe to.\p\\
You can specify the "outfield=" field (optional) to have the results written back to a different field (the field will be created if it does not exist). If you don't specify the "outfield=" then the results overwrite the input field.\p\\
You can specify the "debug=" option (optional) to log diagnostic data to cyberchef.log in the search's dispatch directory (useful for reporting issues).\p\\
You must specify one of the following options, and it must be the last item in the SPL for this command:\i\\
	"operation" - a single CyberChef operation with no parameters.\i\\
	"jsonRecipe" - a CyberChef recipe saved as compact json.\i\\
	"encodedRecipe" - a CyberChef recipe saved as compact json, and then converted to a base64 string (if you have non-standard chars).\i\\
	"savedRecipe" - a cyberchef recipe, saved as compact json, and given a nickname. These recipes must be saved to a text file located in this App's ./local/recipes folder.  See the ./default/recipes/readme.txt file for examples.\p\\
This app only supports ASCII characters in the SPL (the field names and the operation). The data that this command works on does not have this limitation.\p\\
Fieldnames must be single-quoted if they contain any non-alphanumeric characters.  You must escape the pipe and single-quote character with a backslash in the fieldname.  The operation/recipe specified must be double-quoted and only the pipe character must me escaped with a backslash.

category   		= fields::modifying
usage 			= public
tags 			= encode decode cyberchef

syntax = cyberchef infield=<field> (outfield=<field>)? (debug=(info|full))? (operation=<string>)|(jsonrecipe=<string>)|(savedrecipe=<string>)(encodedrecipe=<string>)

example1 = ... | cyberchef infield='data' operation="toBase64"
comment1 = Convert the value of the 'data' field to Base64 encoding with default parameters, and save in back to the 'data' field. 

example2 = ... | cyberchef infield='data' outfield=xxx jsonrecipe="[{"op":"To Base64","args":["A-Za-z0-9+/="]}]" 
comment2 = Apply a CyberChef Recipe (in this case the toBase64 operation in compact json form) to the 'data' field, and save to a new (or existing) field named 'xxx'. 

example3 = ... | cyberchef infield=data encodedrecipe="W3sib3AiOiJUbyBCYXNlNjQiLCJhcmdzIjpbIkEtWmEtejAtOSsvPSJdfV0="
comment3 = Apply a CyberChef Recipe (in this case toBase64) to the 'data' field. The b64recipe option is a compact-json representation of the recipe, encoded as a base64 string.

example4 = ... | cyberchef infield=data savedrecipe="myRecipe"
comment4 = Load a CyberChef recipe named 'myRecipe' from a file located in ./lcoal/recipes/, and apply it to the 'data' field. See the README.txt in this Apps's default recipes folder.

