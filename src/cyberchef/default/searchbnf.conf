[cyberchef-command]
syntax = cyberchef (<selfjoin-options>)* <field-list>
shortdesc = Parse results with CyberChef
description = Process field values with CyberChef commands or recipes
usage = public
example1 = cyberchef infield='data' command="to base 64"
comment1 = Convert the value of the 'data' field to Base64 encoding, and save in back to the 'data' field.
example2 = cyberchef infield='data' outfield='data_hashed' command="SHA3"
comment2 = Calculate the SHA3 hash of the 'data' field, and save in back to the 'data_hashed' field (the outfield will be created if it does not exist).
example3 = cyberchef infield='data' command="ToBase64"
comment3 = Same as the first example, except it uses the 'node api' name for the function, rather than the name from the interactive version.
example4 = cyberchef infield='data' recipe='myRecipe'
comment4 = Load a CyberChef recipe named 'myRecipe' from file, and apply it to the 'data' field. Recipes are designed in the interactive version of CyberChef, and saved as a 'Compact JASON' in this App's './local/recipes' folder. The format of each recipe is: recipename:json (the name of the recipe, followed by a colon, then the JSON as provied by the CyberChef interactive GUI).
tags = encode decode cyberchef

syntax = cyberchef infield=<field> [outfield=<field>] (command=<string> | recipe=<string>)